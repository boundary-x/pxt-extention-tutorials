<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="jK)]cBm~WRGoT[6frB$(" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="igJ?#y6Fv-8YvY6HXF%Z"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace motor {" line1="    const PCA9685_ADDRESS = 0x40" line2="    const MODE1 = 0x00" line3="    const MODE2 = 0x01" line4="    const SUBADR1 = 0x02" line5="    const SUBADR2 = 0x03" line6="    const SUBADR3 = 0x04" line7="    const PRESCALE = 0xFE" line8="    const LED0_ON_L = 0x06" line9="    const LED0_ON_H = 0x07" line10="    const LED0_OFF_L = 0x08" line11="    const LED0_OFF_H = 0x09" line12="    const ALL_LED_ON_L = 0xFA" line13="    const ALL_LED_ON_H = 0xFB" line14="    const ALL_LED_OFF_L = 0xFC" line15="    const ALL_LED_OFF_H = 0xFD" line16="" line17="    const STP_CHA_L = 2047" line18="    const STP_CHA_H = 4095" line19="" line20="    const STP_CHB_L = 1" line21="    const STP_CHB_H = 2047" line22="" line23="    const STP_CHC_L = 1023" line24="    const STP_CHC_H = 3071" line25="" line26="    const STP_CHD_L = 3071" line27="    const STP_CHD_H = 1023" line28="" line29="" line30="    const BYG_CHA_L = 3071" line31="    const BYG_CHA_H = 1023" line32="" line33="    const BYG_CHB_L = 1023" line34="    const BYG_CHB_H = 3071" line35="" line36="    const BYG_CHC_L = 4095" line37="    const BYG_CHC_H = 2047" line38="" line39="    const BYG_CHD_L = 2047" line40="    const BYG_CHD_H = 4095" line41="" line42="    /**" line43="     * The user can choose the step motor model." line44="     */" line45="    export enum Stepper {" line46="        //% block=&quot;42&quot;" line47="        Ste1 = 1," line48="        //% block=&quot;28&quot;" line49="        Ste2 = 2" line50="    }" line51="" line52="    /**" line53="     * The user can select the 8 steering gear controller." line54="     */" line55="    export enum Servos {" line56="        S1 = 0x01," line57="        S2 = 0x02," line58="        S3 = 0x03," line59="        S4 = 0x04," line60="        S5 = 0x05," line61="        S6 = 0x06," line62="        S7 = 0x07," line63="        S8 = 0x08" line64="    }" line65="" line66="    /**" line67="     * The user selects the 4-way dc motor." line68="     */" line69="    export enum Motors {" line70="        M1 = 0x1," line71="        M2 = 0x2," line72="        M3 = 0x3," line73="        M4 = 0x4" line74="    }" line75="" line76="    /**" line77="     * The user defines the motor rotation direction." line78="     */" line79="    export enum Dir {" line80="        //% blockId=&quot;정회전&quot; block=&quot;정회전&quot;" line81="        CW = 1," line82="        //% blockId=&quot;역회전&quot; block=&quot;역회전&quot;" line83="        CCW = -1," line84="    }" line85="" line86="    /**" line87="     * The user can select a two-path stepper motor controller." line88="     */" line89="    export enum Steppers {" line90="        M1_M2 = 0x1," line91="        M3_M4 = 0x2" line92="    }" line93="" line94="" line95="" line96="    let initialized = false" line97="" line98="    function i2cWrite(addr: number, reg: number, value: number) {" line99="        let buf = pins.createBuffer(2)" line100="        buf[0] = reg" line101="        buf[1] = value" line102="        pins.i2cWriteBuffer(addr, buf)" line103="    }" line104="" line105="    function i2cCmd(addr: number, value: number) {" line106="        let buf2 = pins.createBuffer(1)" line107="        buf2[0] = value" line108="        pins.i2cWriteBuffer(addr, buf2)" line109="    }" line110="" line111="    function i2cRead(addr: number, reg: number) {" line112="        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);" line113="        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);" line114="        return val;" line115="    }" line116="" line117="    function initPCA9685(): void {" line118="        i2cWrite(PCA9685_ADDRESS, MODE1, 0x00)" line119="        setFreq(50);" line120="        initialized = true" line121="    }" line122="" line123="    function setFreq(freq: number): void {" line124="        // Constrain the frequency" line125="        let prescaleval = 25000000;" line126="        prescaleval /= 4096;" line127="        prescaleval /= freq;" line128="        prescaleval -= 1;" line129="        let prescale = prescaleval;//Math.floor(prescaleval + 0.5);" line130="        let oldmode = i2cRead(PCA9685_ADDRESS, MODE1);" line131="        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep" line132="        i2cWrite(PCA9685_ADDRESS, MODE1, newmode); // go to sleep" line133="        i2cWrite(PCA9685_ADDRESS, PRESCALE, prescale); // set the prescaler" line134="        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode);" line135="        control.waitMicros(5000);" line136="        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode | 0xa1);" line137="    }" line138="" line139="    function setPwm(channel: number, on: number, off: number): void {" line140="        if (channel &lt; 0 || channel &gt; 15)" line141="            return;" line142="" line143="        let buf3 = pins.createBuffer(5);" line144="        buf3[0] = LED0_ON_L + 4 * channel;" line145="        buf3[1] = on &amp; 0xff;" line146="        buf3[2] = (on &gt;&gt; 8) &amp; 0xff;" line147="        buf3[3] = off &amp; 0xff;" line148="        buf3[4] = (off &gt;&gt; 8) &amp; 0xff;" line149="        pins.i2cWriteBuffer(PCA9685_ADDRESS, buf3);" line150="    }" line151="" line152="" line153="    function setStepper_28(index: number, dir: boolean): void {" line154="        if (index == 1) {" line155="            if (dir) {" line156="                setPwm(4, STP_CHA_L, STP_CHA_H);" line157="                setPwm(6, STP_CHB_L, STP_CHB_H);" line158="                setPwm(5, STP_CHC_L, STP_CHC_H);" line159="                setPwm(7, STP_CHD_L, STP_CHD_H);" line160="            } else {" line161="                setPwm(7, STP_CHA_L, STP_CHA_H);" line162="                setPwm(5, STP_CHB_L, STP_CHB_H);" line163="                setPwm(6, STP_CHC_L, STP_CHC_H);" line164="                setPwm(4, STP_CHD_L, STP_CHD_H);" line165="            }" line166="        } else {" line167="            if (dir) {" line168="                setPwm(0, STP_CHA_L, STP_CHA_H);" line169="                setPwm(2, STP_CHB_L, STP_CHB_H);" line170="                setPwm(1, STP_CHC_L, STP_CHC_H);" line171="                setPwm(3, STP_CHD_L, STP_CHD_H);" line172="            } else {" line173="                setPwm(3, STP_CHA_L, STP_CHA_H);" line174="                setPwm(1, STP_CHB_L, STP_CHB_H);" line175="                setPwm(2, STP_CHC_L, STP_CHC_H);" line176="                setPwm(0, STP_CHD_L, STP_CHD_H);" line177="            }" line178="        }" line179="    }" line180="" line181="" line182="    function setStepper_42(index: number, dir: boolean): void {" line183="        if (index == 1) {" line184="            if (dir) {" line185="                setPwm(7, BYG_CHA_L, BYG_CHA_H);" line186="                setPwm(6, BYG_CHB_L, BYG_CHB_H);" line187="                setPwm(5, BYG_CHC_L, BYG_CHC_H);" line188="                setPwm(4, BYG_CHD_L, BYG_CHD_H);" line189="            } else {" line190="                setPwm(7, BYG_CHC_L, BYG_CHC_H);" line191="                setPwm(6, BYG_CHD_L, BYG_CHD_H);" line192="                setPwm(5, BYG_CHA_L, BYG_CHA_H);" line193="                setPwm(4, BYG_CHB_L, BYG_CHB_H);" line194="            }" line195="        } else {" line196="            if (dir) {" line197="                setPwm(3, BYG_CHA_L, BYG_CHA_H);" line198="                setPwm(2, BYG_CHB_L, BYG_CHB_H);" line199="                setPwm(1, BYG_CHC_L, BYG_CHC_H);" line200="                setPwm(0, BYG_CHD_L, BYG_CHD_H);" line201="            } else {" line202="                setPwm(3, BYG_CHC_L, BYG_CHC_H);" line203="                setPwm(2, BYG_CHD_L, BYG_CHD_H);" line204="                setPwm(1, BYG_CHA_L, BYG_CHA_H);" line205="                setPwm(0, BYG_CHB_L, BYG_CHB_H);" line206="            }" line207="        }" line208="    }" line209="" line210="" line211="    /**" line212="     * Steering gear control function." line213="     * S1~S8." line214="     * 0°~180°." line215="    */" line216="    //% blockId=motor_servo block=&quot;|%index|서보모터|%degree|각도로 이동&quot;" line217="    //% weight=100" line218="    //% degree.min=0 degree.max=180" line219="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=4" line220="    export function servo(index: Servos, degree: number): void {" line221="        if (!initialized) {" line222="            initPCA9685()" line223="        }" line224="        // 50hz" line225="        let v_us = (degree * 1800 / 180 + 600) // 0.6ms ~ 2.4ms" line226="        let value = v_us * 4096 / 20000" line227="        setPwm(index + 7, 0, value)" line228="    }" line229="" line230="    /**" line231="     * Execute a motor" line232="     * M1~M4." line233="     * speed(0~255)." line234="    */" line235="    //% weight=90" line236="    //% blockId=motor_MotorRun block=&quot;|%index|모터|%Dir|방향|%speed|속도로 회전&quot;" line237="    //% speed.min=0 speed.max=255" line238="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2" line239="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2" line240="    export function MotorRun(index: Motors, direction: Dir, speed: number): void {" line241="" line242="        if (!initialized) {" line243="            initPCA9685()" line244="        }" line245="" line246="        if (index === 3 || index === 4) {" line247="            direction = direction * -1;" line248="        }" line249="" line250="        speed = speed * 16 * direction; // map 255 to 4096" line251="        if (speed &gt;= 4096) {" line252="            speed = 4095" line253="        }" line254="        if (speed &lt;= -4096) {" line255="            speed = -4095" line256="        }" line257="        if (index &gt; 4 || index &lt;= 0)" line258="            return" line259="        let pn = (4 - index) * 2" line260="        let pp = (4 - index) * 2 + 1" line261="        if (speed &gt;= 0) {" line262="            setPwm(pp, 0, speed)" line263="            setPwm(pn, 0, 0)" line264="        } else {" line265="            setPwm(pp, 0, 0)" line266="            setPwm(pn, 0, -speed)" line267="        }" line268="    }" line269="" line270="    /**" line271="     * Execute a 42BYGH1861A-C step motor(Degree)." line272="     * M1_M2/M3_M4." line273="    */" line274="    //% weight=80" line275="    //% blockId=motor_stepperDegree_42 block=&quot;Stepper 42|%index|dir|%direction|degree|%degree&quot;" line276="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2" line277="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2" line278="    export function stepperDegree_42(index: Steppers, direction: Dir, degree: number): void {" line279="        if (!initialized) {" line280="            initPCA9685()" line281="        }" line282="        // let Degree = Math.abs(degree);" line283="        // Degree = Degree * direction;" line284="        //setFreq(100);" line285="        setStepper_42(index, direction &gt; 0);" line286="        if (degree == 0) {" line287="            return;" line288="        }" line289="        let Degree = Math.abs(degree);" line290="        basic.pause((50000 * Degree) / (360 * 100));  //100hz" line291="        if (index == 1) {" line292="            motorStop(1)" line293="            motorStop(2)" line294="        } else {" line295="            motorStop(3)" line296="            motorStop(4)" line297="        }" line298="        //setFreq(50);" line299="    }" line300="" line301="    /**" line302="     * Execute a 42BYGH1861A-C step motor(Turn)." line303="     * M1_M2/M3_M4." line304="    */" line305="    //% weight=70" line306="    //% blockId=motor_stepperTurn_42 block=&quot;Stepper 42|%index|dir|%direction|turn|%turn&quot;" line307="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2" line308="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2" line309="    export function stepperTurn_42(index: Steppers, direction: Dir, turn: number): void {" line310="        if (turn == 0) {" line311="            return;" line312="        }" line313="        let degree = turn * 360;" line314="        stepperDegree_42(index, direction, degree);" line315="    }" line316="" line317="    /**" line318="     * Execute a 28BYJ-48 step motor(Degree)." line319="     * M1_M2/M3_M4." line320="    */" line321="    //% weight=60" line322="    //% blockId=motor_stepperDegree_28 block=&quot;Stepper 28|%index|dir|%direction|degree|%degree&quot;" line323="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2" line324="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2" line325="    export function stepperDegree_28(index: Steppers, direction: Dir, degree: number): void {" line326="        if (!initialized) {" line327="            initPCA9685()" line328="        }" line329="        if (degree == 0) {" line330="            return;" line331="        }" line332="        let Degree2 = Math.abs(degree);" line333="        Degree2 = Degree2 * direction;" line334="        //setFreq(100);" line335="        setStepper_28(index, Degree2 &gt; 0);" line336="        Degree2 = Math.abs(Degree2);" line337="        basic.pause((1000 * Degree2) / 360);" line338="        if (index == 1) {" line339="            motorStop(1)" line340="            motorStop(2)" line341="        } else {" line342="            motorStop(3)" line343="            motorStop(4)" line344="        }" line345="        //setFreq(50);" line346="    }" line347="" line348="    /**" line349="     * Execute a 28BYJ-48 step motor(Turn)." line350="     * M1_M2/M3_M4." line351="    */" line352="    //% weight=50" line353="    //% blockId=motor_stepperTurn_28 block=&quot;Stepper 28|%index|dir|%direction|turn|%turn&quot;" line354="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2" line355="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2" line356="    export function stepperTurn_28(index: Steppers, direction: Dir, turn: number): void {" line357="        if (turn == 0) {" line358="            return;" line359="        }" line360="        let degree2 = turn * 360;" line361="        stepperDegree_28(index, direction, degree2);" line362="    }" line363="" line364="    /**" line365="     * Two parallel stepper motors are executed simultaneously(DegreeDual)." line366="    */" line367="    //% weight=40" line368="    //% blockId=motor_stepperDegreeDual_42 block=&quot;Dual Stepper %stepper|M1_M2 dir %direction1|degree %degree1|M3_M4 dir %direction2|degree %degree2&quot;" line369="    //% stepper.fieldEditor=&quot;gridpicker&quot; stepper.fieldOptions.columns=2" line370="    //% direction1.fieldEditor=&quot;gridpicker&quot; direction1.fieldOptions.columns=2" line371="    //% direction2.fieldEditor=&quot;gridpicker&quot; direction2.fieldOptions.columns=2" line372="    export function stepperDegreeDual_42(stepper: Stepper, direction1: Dir, degree1: number, direction2: Dir, degree2: number): void {" line373="        if (!initialized) {" line374="            initPCA9685()" line375="        }" line376="        let timeout1 = 0;" line377="        let timeout2 = 0;" line378="        let Degree1 = Math.abs(degree1);" line379="        let Degree22 = Math.abs(degree2);" line380="" line381="        if (stepper == 1) {  // 42 stepper" line382="            if (Degree1 == 0 &amp;&amp; Degree22 == 0) {" line383="                setStepper_42(0x01, direction1 &gt; 0);" line384="                setStepper_42(0x02, direction2 &gt; 0);" line385="            } else if ((Degree1 == 0) &amp;&amp; (Degree22 &gt; 0)) {" line386="                timeout1 = (50000 * Degree22) / (360 * 100)" line387="                setStepper_42(0x01, direction1 &gt; 0);" line388="                setStepper_42(0x02, direction2 &gt; 0);" line389="                basic.pause(timeout1);" line390="                motorStop(3); motorStop(4);" line391="            } else if ((Degree22 == 0) &amp;&amp; (Degree1 &gt; 0)) {" line392="                timeout1 = (50000 * Degree1) / (360 * 100)" line393="                setStepper_42(0x01, direction1 &gt; 0);" line394="                setStepper_42(0x02, direction2 &gt; 0);" line395="                basic.pause(timeout1);" line396="                motorStop(1); motorStop(2);" line397="            } else if ((Degree22 &gt; Degree1)) {" line398="                timeout1 = (50000 * Degree1) / (360 * 100)" line399="                timeout2 = (50000 * (Degree22 - Degree1)) / (360 * 100)" line400="                setStepper_42(0x01, direction1 &gt; 0);" line401="                setStepper_42(0x02, direction2 &gt; 0);" line402="                basic.pause(timeout1);" line403="                motorStop(1); motorStop(2);" line404="                basic.pause(timeout2);" line405="                motorStop(3); motorStop(4);" line406="            } else if ((Degree22 &lt; Degree1)) {" line407="                timeout1 = (50000 * Degree22) / (360 * 100)" line408="                timeout2 = (50000 * (Degree1 - Degree22)) / (360 * 100)" line409="                setStepper_42(0x01, direction1 &gt; 0);" line410="                setStepper_42(0x02, direction2 &gt; 0);" line411="                basic.pause(timeout1);" line412="                motorStop(3); motorStop(4);" line413="                basic.pause(timeout2);" line414="                motorStop(1); motorStop(2);" line415="            }" line416="        } else if (stepper == 2) {" line417="            if (Degree1 == 0 &amp;&amp; Degree22 == 0) {" line418="                setStepper_28(0x01, direction1 &gt; 0);" line419="                setStepper_28(0x02, direction2 &gt; 0);" line420="            } else if ((Degree1 == 0) &amp;&amp; (Degree22 &gt; 0)) {" line421="                timeout1 = (50000 * Degree22) / (360 * 100)" line422="                setStepper_28(0x01, direction1 &gt; 0);" line423="                setStepper_28(0x02, direction2 &gt; 0);" line424="                basic.pause(timeout1);" line425="                motorStop(3); motorStop(4);" line426="            } else if ((Degree22 == 0) &amp;&amp; (Degree1 &gt; 0)) {" line427="                timeout1 = (50000 * Degree1) / (360 * 100)" line428="                setStepper_28(0x01, direction1 &gt; 0);" line429="                setStepper_28(0x02, direction2 &gt; 0);" line430="                basic.pause(timeout1);" line431="                motorStop(1); motorStop(2);" line432="            } else if ((Degree22 &gt; Degree1)) {" line433="                timeout1 = (50000 * Degree1) / (360 * 100)" line434="                timeout2 = (50000 * (Degree22 - Degree1)) / (360 * 100)" line435="                setStepper_28(0x01, direction1 &gt; 0);" line436="                setStepper_28(0x02, direction2 &gt; 0);" line437="                basic.pause(timeout1);" line438="                motorStop(1); motorStop(2);" line439="                basic.pause(timeout2);" line440="                motorStop(3); motorStop(4);" line441="            } else if ((Degree22 &lt; Degree1)) {" line442="                timeout1 = (50000 * Degree22) / (360 * 100)" line443="                timeout2 = (50000 * (Degree1 - Degree22)) / (360 * 100)" line444="                setStepper_28(0x01, direction1 &gt; 0);" line445="                setStepper_28(0x02, direction2 &gt; 0);" line446="                basic.pause(timeout1);" line447="                motorStop(3); motorStop(4);" line448="                basic.pause(timeout2);" line449="                motorStop(1); motorStop(2);" line450="            }" line451="        } else {" line452="            //" line453="        }" line454="    }" line455="" line456="    /**" line457="     * Two parallel stepper motors are executed simultaneously(Turn)." line458="    */" line459="    //% weight=30" line460="    //% blockId=motor_stepperTurnDual_42 block=&quot;Dual Stepper %stepper|M1_M2 dir %direction1|trun %trun1|M3_M4 dir %direction2|trun %trun2&quot;" line461="    //% stepper.fieldEditor=&quot;gridpicker&quot; stepper.fieldOptions.columns=2" line462="    //% direction1.fieldEditor=&quot;gridpicker&quot; direction1.fieldOptions.columns=2" line463="    //% direction2.fieldEditor=&quot;gridpicker&quot; direction2.fieldOptions.columns=2" line464="    export function stepperTurnDual_42(stepper: Stepper, direction1: Dir, trun1: number, direction2: Dir, trun2: number): void {" line465="        if ((trun1 == 0) &amp;&amp; (trun2 == 0)) {" line466="            return;" line467="        }" line468="        let degree1 = trun1 * 360;" line469="        let degree22 = trun2 * 360;" line470="" line471="        if (stepper == 1) {" line472="            stepperDegreeDual_42(stepper, direction1, degree1, direction2, degree22);" line473="        } else if (stepper == 2) {" line474="            stepperDegreeDual_42(stepper, direction1, degree1, direction2, degree22);" line475="        } else {" line476="" line477="        }" line478="" line479="    }" line480="" line481="    /**" line482="     * Stop the dc motor." line483="    */" line484="    //% weight=20" line485="    //% blockId=motor_motorStop block=&quot;Motor stop|%index&quot;" line486="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2 " line487="    export function motorStop(index: Motors) {" line488="        setPwm((4 - index) * 2, 0, 0);" line489="        setPwm((4 - index) * 2 + 1, 0, 0);" line490="    }" line491="" line492="    /**" line493="     * Stop all motors" line494="    */" line495="    //% weight=10" line496="    //% blockId=motor_motorStopAll block=&quot;Motor Stop All&quot;" line497="    export function motorStopAll(): void {" line498="        for (let idx = 1; idx &lt;= 4; idx++) {" line499="            motorStop(idx);" line500="        }" line501="    }" line502="}" numlines="503"></mutation></block></statement></block></xml>