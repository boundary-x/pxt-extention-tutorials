<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="Sd*06V#B26.nHW0D03zp" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="4`=LWNPm,O2h0IU`+%%="><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ponyBot {" line1="    const PCA9685_ADDRESS = 0x40" line2="    const MODE1 = 0x00" line3="    const MODE2 = 0x01" line4="    const SUBADR1 = 0x02" line5="    const SUBADR2 = 0x03" line6="    const SUBADR3 = 0x04" line7="    const PRESCALE = 0xFE" line8="    const LED0_ON_L = 0x06" line9="    const LED0_ON_H = 0x07" line10="    const LED0_OFF_L = 0x08" line11="    const LED0_OFF_H = 0x09" line12="    const ALL_LED_ON_L = 0xFA" line13="    const ALL_LED_ON_H = 0xFB" line14="    const ALL_LED_OFF_L = 0xFC" line15="    const ALL_LED_OFF_H = 0xFD" line16="" line17="    const STP_CHA_L = 2047" line18="    const STP_CHA_H = 4095" line19="" line20="    const STP_CHB_L = 1" line21="    const STP_CHB_H = 2047" line22="" line23="    const STP_CHC_L = 1023" line24="    const STP_CHC_H = 3071" line25="" line26="    const STP_CHD_L = 3071" line27="    const STP_CHD_H = 1023" line28="" line29="" line30="    const BYG_CHA_L = 3071" line31="    const BYG_CHA_H = 1023" line32="" line33="    const BYG_CHB_L = 1023" line34="    const BYG_CHB_H = 3071" line35="" line36="    const BYG_CHC_L = 4095" line37="    const BYG_CHC_H = 2047" line38="" line39="    const BYG_CHD_L = 2047" line40="    const BYG_CHD_H = 4095" line41="" line42="    class tcs3472 {" line43="        is_setup: boolean" line44="        addr: number" line45="        leds: DigitalPin" line46="" line47="        constructor(addr: number) {" line48="            this.is_setup = false" line49="            this.addr = addr" line50="        }" line51="" line52="        setup(): void {" line53="            if (this.is_setup) return" line54="            this.is_setup = true" line55="            smbus.writeByte(this.addr, 0x80, 0x03)" line56="            smbus.writeByte(this.addr, 0x81, 0x2b)" line57="        }" line58="" line59="        setIntegrationTime(time: number): void {" line60="            this.setup()" line61="            time = Math.clamp(0, 255, time * 10 / 24)" line62="            smbus.writeByte(this.addr, 0x81, 255 - time)" line63="        }" line64="" line65="        light(): number {" line66="            return this.raw()[0]" line67="        }" line68="" line69="        rgb(): number[] {" line70="            let result: number[] = this.raw()" line71="            let clear: number = result.shift()" line72="            for (let x: number = 0; x &lt; result.length; x++) {" line73="                result[x] = result[x] * 255 / clear" line74="            }" line75="            return result" line76="        }" line77="" line78="        raw(): number[] {" line79="            this.setup()" line80="            let result2: Buffer = smbus.readBuffer(this.addr, 0xb4, pins.sizeOf(NumberFormat.UInt16LE) * 4)" line81="            return smbus.unpack(&quot;HHHH&quot;, result2)" line82="        }" line83="    }" line84="" line85="    /** " line86="     * The user can choose the mecanum mode direction " line87="     */" line88="    export enum Mecanum {" line89="        //% block=&quot;↖&quot;" line90="        lf = 1," line91="        //% block=&quot;↑&quot;" line92="        ff = 2," line93="        //% block=&quot;↗&quot;" line94="        rf = 3," line95="        //% block=&quot;←&quot;" line96="        ll = 4," line97="        //% block=&quot;s&quot;" line98="        ss = 5," line99="        //% block=&quot;→&quot;" line100="        rr = 6," line101="        //% block=&quot;↙&quot;" line102="        lb = 7," line103="        //% block=&quot;↓&quot;" line104="        bb = 8," line105="        //% block=&quot;↘&quot;" line106="        rb = 9" line107="    }" line108="" line109="    /** " line110="    * The user can choose the mobility controll" line111="    */" line112="    export enum DirControll {" line113="        //% block=&quot;↑&quot;" line114="        foward = 1," line115="        //% block=&quot;↓&quot;" line116="        backward = 2," line117="        //% block=&quot;↶&quot;" line118="        CWRotate = 3," line119="        //% block=&quot;↷&quot;" line120="        CCWRotate = 4," line121="    }" line122="" line123="    /**" line124="     * The user can choose the step motor model." line125="     */" line126="    export enum Stepper {" line127="        //% block=&quot;42&quot;" line128="        Ste1 = 1," line129="        //% block=&quot;28&quot;" line130="        Ste2 = 2" line131="    }" line132="" line133="    /**" line134="     * The user can select the 8 steering gear controller." line135="     */" line136="    export enum Servos {" line137="        S1 = 0x01," line138="        S2 = 0x02," line139="        S3 = 0x03," line140="        S4 = 0x04," line141="        S5 = 0x05," line142="        S6 = 0x06," line143="        S7 = 0x07," line144="        S8 = 0x08" line145="    }" line146="" line147="    /**" line148="     * The user selects the 4-way dc motor." line149="     */" line150="    export enum Motors {" line151="        M1 = 0x1," line152="        M2 = 0x2," line153="        M3 = 0x3," line154="        M4 = 0x4" line155="    }" line156="" line157="    /**" line158="     * The user defines the motor rotation direction." line159="     */" line160="    export enum Dir {" line161="        //% blockId=&quot;정회전&quot; block=&quot;정회전&quot;" line162="        CW = 1," line163="        //% blockId=&quot;역회전&quot; block=&quot;역회전&quot;" line164="        CCW = -1," line165="    }" line166="" line167="    /**" line168="     * The user can select a two-path stepper motor controller." line169="     */" line170="    export enum Steppers {" line171="        M1_M2 = 0x1," line172="        M3_M4 = 0x2" line173="    }" line174="" line175="    export enum twoLineState {" line176="        //% block=&quot;◌ ◌ &quot; " line177="        two_line_State_0 = 0," line178="        //% block=&quot;● ●&quot; " line179="        two_line_State_1 = 1," line180="        //% block=&quot;● ◌&quot; " line181="        two_line_State_2 = 2," line182="        //% block=&quot;◌ ●&quot; " line183="        two_line_State_3 = 3," line184="    }" line185="" line186="    export enum lineState {" line187="        //% block=&quot;◌&quot; " line188="        line_State_0 = 0," line189="        //% block=&quot;●&quot; " line190="        line_State_1 = 1" line191="    }" line192="" line193="    export enum lineSensorChannel {" line194="        //% block=&quot;왼쪽&quot;" line195="        reft = 1," line196="        //% block=&quot;오른쪽&quot;" line197="        right = 2," line198="    }" line199="" line200="    export enum PingUnit {" line201="        //% block=&quot;마이크로초&quot;" line202="        MicroSeconds," line203="        //% block=&quot;센티미터&quot;" line204="        Centimeters," line205="        //% block=&quot;인치&quot;" line206="        Inches" line207="    }" line208="" line209="    export enum DetectedColor {" line210="        //% block=&quot;빨간색&quot;" line211="        Red," line212="        //% block=&quot;초록색&quot;" line213="        Green," line214="        //% block=&quot;파란색&quot;" line215="        Blue," line216="        //% block=&quot;흰색&quot;" line217="        White," line218="        //% block=&quot;검은색&quot;" line219="        Black," line220="    }" line221="" line222="    let initialized = false" line223="" line224="    function i2cWrite(addr: number, reg: number, value: number) {" line225="        let buf = pins.createBuffer(2)" line226="        buf[0] = reg" line227="        buf[1] = value" line228="        pins.i2cWriteBuffer(addr, buf)" line229="    }" line230="" line231="    function i2cCmd(addr: number, value: number) {" line232="        let buf2 = pins.createBuffer(1)" line233="        buf2[0] = value" line234="        pins.i2cWriteBuffer(addr, buf2)" line235="    }" line236="" line237="    function i2cRead(addr: number, reg: number) {" line238="        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);" line239="        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);" line240="        return val;" line241="    }" line242="" line243="    function initPCA9685(): void {" line244="        i2cWrite(PCA9685_ADDRESS, MODE1, 0x00)" line245="        setFreq(50);" line246="        initialized = true" line247="    }" line248="" line249="    function setFreq(freq: number): void {" line250="        // Constrain the frequency" line251="        let prescaleval = 25000000;" line252="        prescaleval /= 4096;" line253="        prescaleval /= freq;" line254="        prescaleval -= 1;" line255="        let prescale = prescaleval;//Math.floor(prescaleval + 0.5);" line256="        let oldmode = i2cRead(PCA9685_ADDRESS, MODE1);" line257="        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep" line258="        i2cWrite(PCA9685_ADDRESS, MODE1, newmode); // go to sleep" line259="        i2cWrite(PCA9685_ADDRESS, PRESCALE, prescale); // set the prescaler" line260="        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode);" line261="        control.waitMicros(5000);" line262="        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode | 0xa1);" line263="    }" line264="" line265="    function setPwm(channel: number, on: number, off: number): void {" line266="        if (channel &lt; 0 || channel &gt; 15)" line267="            return;" line268="" line269="        let buf3 = pins.createBuffer(5);" line270="        buf3[0] = LED0_ON_L + 4 * channel;" line271="        buf3[1] = on &amp; 0xff;" line272="        buf3[2] = (on &gt;&gt; 8) &amp; 0xff;" line273="        buf3[3] = off &amp; 0xff;" line274="        buf3[4] = (off &gt;&gt; 8) &amp; 0xff;" line275="        pins.i2cWriteBuffer(PCA9685_ADDRESS, buf3);" line276="    }" line277="" line278="" line279="    function setStepper_28(index: number, dir: boolean): void {" line280="        if (index == 1) {" line281="            if (dir) {" line282="                setPwm(4, STP_CHA_L, STP_CHA_H);" line283="                setPwm(6, STP_CHB_L, STP_CHB_H);" line284="                setPwm(5, STP_CHC_L, STP_CHC_H);" line285="                setPwm(7, STP_CHD_L, STP_CHD_H);" line286="            } else {" line287="                setPwm(7, STP_CHA_L, STP_CHA_H);" line288="                setPwm(5, STP_CHB_L, STP_CHB_H);" line289="                setPwm(6, STP_CHC_L, STP_CHC_H);" line290="                setPwm(4, STP_CHD_L, STP_CHD_H);" line291="            }" line292="        } else {" line293="            if (dir) {" line294="                setPwm(0, STP_CHA_L, STP_CHA_H);" line295="                setPwm(2, STP_CHB_L, STP_CHB_H);" line296="                setPwm(1, STP_CHC_L, STP_CHC_H);" line297="                setPwm(3, STP_CHD_L, STP_CHD_H);" line298="            } else {" line299="                setPwm(3, STP_CHA_L, STP_CHA_H);" line300="                setPwm(1, STP_CHB_L, STP_CHB_H);" line301="                setPwm(2, STP_CHC_L, STP_CHC_H);" line302="                setPwm(0, STP_CHD_L, STP_CHD_H);" line303="            }" line304="        }" line305="    }" line306="" line307="" line308="    function setStepper_42(index: number, dir: boolean): void {" line309="        if (index == 1) {" line310="            if (dir) {" line311="                setPwm(7, BYG_CHA_L, BYG_CHA_H);" line312="                setPwm(6, BYG_CHB_L, BYG_CHB_H);" line313="                setPwm(5, BYG_CHC_L, BYG_CHC_H);" line314="                setPwm(4, BYG_CHD_L, BYG_CHD_H);" line315="            } else {" line316="                setPwm(7, BYG_CHC_L, BYG_CHC_H);" line317="                setPwm(6, BYG_CHD_L, BYG_CHD_H);" line318="                setPwm(5, BYG_CHA_L, BYG_CHA_H);" line319="                setPwm(4, BYG_CHB_L, BYG_CHB_H);" line320="            }" line321="        } else {" line322="            if (dir) {" line323="                setPwm(3, BYG_CHA_L, BYG_CHA_H);" line324="                setPwm(2, BYG_CHB_L, BYG_CHB_H);" line325="                setPwm(1, BYG_CHC_L, BYG_CHC_H);" line326="                setPwm(0, BYG_CHD_L, BYG_CHD_H);" line327="            } else {" line328="                setPwm(3, BYG_CHC_L, BYG_CHC_H);" line329="                setPwm(2, BYG_CHD_L, BYG_CHD_H);" line330="                setPwm(1, BYG_CHA_L, BYG_CHA_H);" line331="                setPwm(0, BYG_CHB_L, BYG_CHB_H);" line332="            }" line333="        }" line334="    }" line335="" line336="" line337="    /**" line338="     * Steering gear control function." line339="     * S1~S8." line340="     * 0°~180°." line341="    */" line342="    //% blockId=motor_servo block=&quot;|%index|서보모터|%degree|각도로 이동&quot;" line343="    //% weight=0" line344="    //% degree.min=0 degree.max=180" line345="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=4" line346="    //% group=&quot;서보모터 제어&quot;" line347="    export function servo(index: Servos, degree: number): void {" line348="        if (!initialized) {" line349="            initPCA9685()" line350="        }" line351="        // 50hz" line352="        let v_us = (degree * 1800 / 180 + 600) // 0.6ms ~ 2.4ms" line353="        let value = v_us * 4096 / 20000" line354="        setPwm(index + 7, 0, value)" line355="    }" line356="" line357="    /**" line358="     * Execute a motor" line359="     * M1~M4." line360="     * speed(0~255)." line361="    */" line362="    //% weight=0" line363="    //% blockId=motor_MotorRun block=&quot;|%index|모터|%Dir|방향|%speed|속도로 회전&quot;" line364="    //% speed.min=0 speed.max=255" line365="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2" line366="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2" line367="    //% group=&quot;모터 제어(심화)&quot;" line368="    export function MotorRun(index: Motors, direction: Dir, speed: number): void {" line369="" line370="        if (!initialized) {" line371="            initPCA9685()" line372="        }" line373="" line374="        if (index === 3 || index === 4) {" line375="            direction = direction * -1;" line376="        }" line377="" line378="        speed = speed * 16 * direction; // map 255 to 4096" line379="        if (speed &gt;= 4096) {" line380="            speed = 4095" line381="        }" line382="        if (speed &lt;= -4096) {" line383="            speed = -4095" line384="        }" line385="        if (index &gt; 4 || index &lt;= 0)" line386="            return" line387="        let pn = (4 - index) * 2" line388="        let pp = (4 - index) * 2 + 1" line389="        if (speed &gt;= 0) {" line390="            setPwm(pp, 0, speed)" line391="            setPwm(pn, 0, 0)" line392="        } else {" line393="            setPwm(pp, 0, 0)" line394="            setPwm(pn, 0, -speed)" line395="        }" line396="    }" line397="" line398="    /**" line399="     * mecanum mode controll" line400="     * M1~M4." line401="     * speed(0~255)." line402="    */" line403="    //% weight=0" line404="    //% blockId=motor_MecanumRun block=&quot;|메카넘|%Mecanum|방향|%speed|속도로 이동&quot;" line405="    //% speed.min=0 speed.max=255" line406="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=3" line407="    //% group=&quot;모터 제어(기초)&quot;" line408="    export function MecanumRun(direction: Mecanum, speed: number): void {" line409="        if (!initialized) {" line410="            initPCA9685()" line411="        }" line412="" line413="        speed = speed * 16; // map 255 to 4096" line414="" line415="        if (speed &gt;= 4096) {" line416="            speed = 4095" line417="        }" line418="        if (speed &lt;= -4096) {" line419="            speed = -4095" line420="        }" line421="        // motor controll" line422="        // 1  2  3  |  ↖  ↑  ↗" line423="        // 4  5  6  |  ←   s  →" line424="        // 7  8  9  |  ↙  ↓  ↘" line425="        if (direction == 1) {" line426="            // M1 foward" line427="            setPwm(7, 0, speed);" line428="            setPwm(6, 0, 0);" line429="" line430="            // M2 stop" line431="            setPwm(5, 0, 0);" line432="            setPwm(4, 0, 0);" line433="" line434="            // M3 foward" line435="            setPwm(3, 0, 0);" line436="            setPwm(2, 0, speed);" line437="" line438="            // M4 stop" line439="            setPwm(1, 0, 0);" line440="            setPwm(0, 0, 0);" line441="        }" line442="" line443="        if (direction == 2) {" line444="            // M1 foward" line445="            setPwm(7, 0, speed);" line446="            setPwm(6, 0, 0);" line447="" line448="            // M2 foward" line449="            setPwm(5, 0, speed);" line450="            setPwm(4, 0, 0);" line451="" line452="            // M3 foward" line453="            setPwm(3, 0, 0);" line454="            setPwm(2, 0, speed);" line455="" line456="            // M4 foward" line457="            setPwm(1, 0, 0);" line458="            setPwm(0, 0, speed);" line459="        }" line460="" line461="        if (direction == 3) {" line462="            // M1 stop" line463="            setPwm(7, 0, 0);" line464="            setPwm(6, 0, 0);" line465="" line466="            // M2 foward" line467="            setPwm(5, 0, speed);" line468="            setPwm(4, 0, 0);" line469="" line470="            // M3 stop" line471="            setPwm(3, 0, 0);" line472="            setPwm(2, 0, 0);" line473="" line474="            // M4 foward" line475="            setPwm(1, 0, 0);" line476="            setPwm(0, 0, speed);" line477="        }" line478="" line479="        if (direction == 4) {" line480="            // M1 foward" line481="            setPwm(7, 0, speed);" line482="            setPwm(6, 0, 0);" line483="" line484="            // M2 backward" line485="            setPwm(5, 0, 0);" line486="            setPwm(4, 0, speed);" line487="" line488="            // M3 foward" line489="            setPwm(3, 0, 0);" line490="            setPwm(2, 0, speed);" line491="" line492="            // M4 backward" line493="            setPwm(1, 0, speed);" line494="            setPwm(0, 0, 0);" line495="        }" line496="" line497="        if (direction == 5) {" line498="            // M1 stop" line499="            setPwm(7, 0, 0);" line500="            setPwm(6, 0, 0);" line501="" line502="            // M2 stop" line503="            setPwm(5, 0, 0);" line504="            setPwm(4, 0, 0);" line505="" line506="            // M3 stop" line507="            setPwm(3, 0, 0);" line508="            setPwm(2, 0, 0);" line509="" line510="            // M4 stop" line511="            setPwm(1, 0, 0);" line512="            setPwm(0, 0, 0);" line513="        }" line514="" line515="        if (direction == 6) {" line516="            // M1 backward" line517="            setPwm(7, 0, 0);" line518="            setPwm(6, 0, speed);" line519="" line520="            // M2 foward" line521="            setPwm(5, 0, speed);" line522="            setPwm(4, 0, 0);" line523="" line524="            // M3 backward" line525="            setPwm(3, 0, speed);" line526="            setPwm(2, 0, 0);" line527="" line528="            // M4 foward" line529="            setPwm(1, 0, 0);" line530="            setPwm(0, 0, speed);" line531="        }" line532="" line533="        if (direction == 7) {" line534="            // M1 stop" line535="            setPwm(7, 0, 0);" line536="            setPwm(6, 0, 0);" line537="" line538="            // M2 backward" line539="            setPwm(5, 0, 0);" line540="            setPwm(4, 0, speed);" line541="" line542="            // M3 stop" line543="            setPwm(3, 0, 0);" line544="            setPwm(2, 0, 0);" line545="" line546="            // M4 backward" line547="            setPwm(1, 0, speed);" line548="            setPwm(0, 0, 0);" line549="        }" line550="" line551="        if (direction == 8) {" line552="            // M1 backward" line553="            setPwm(7, 0, 0);" line554="            setPwm(6, 0, speed);" line555="" line556="            // M2 backward" line557="            setPwm(5, 0, 0);" line558="            setPwm(4, 0, speed);" line559="" line560="            // M3 backward" line561="            setPwm(3, 0, speed);" line562="            setPwm(2, 0, 0);" line563="" line564="            // M4 backward" line565="            setPwm(1, 0, speed);" line566="            setPwm(0, 0, 0);" line567="        }" line568="" line569="        if (direction == 9) {" line570="            // M1 backward" line571="            setPwm(7, 0, 0);" line572="            setPwm(6, 0, speed);" line573="" line574="            // M2 stop" line575="            setPwm(5, 0, 0);" line576="            setPwm(4, 0, 0);" line577="" line578="            // M3 backward" line579="            setPwm(3, 0, speed);" line580="            setPwm(2, 0, 0);" line581="" line582="            // M4 stop" line583="            setPwm(1, 0, 0);" line584="            setPwm(0, 0, 0);" line585="        }" line586="    }" line587="" line588="    /**" line589="     * Stop the dc motor." line590="    */" line591="    //% weight=0" line592="    //% blockId=motor_motorStop block=&quot;|%index|모터 정지&quot;" line593="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2 " line594="    //% group=&quot;모터 제어(심화)&quot;" line595="    export function motorStop(index: Motors) {" line596="        setPwm((4 - index) * 2, 0, 0);" line597="        setPwm((4 - index) * 2 + 1, 0, 0);" line598="    }" line599="" line600="    /**" line601="     * Stop all motors" line602="    */" line603="    //% weight=20" line604="    //% blockId=motor_motorStopAll block=&quot;|모든 모터 정지&quot;" line605="    //% group=&quot;모터 제어(기초)&quot;" line606="    export function motorStopAll(): void {" line607="        for (let idx = 1; idx &lt;= 4; idx++) {" line608="            motorStop(idx);" line609="        }" line610="    }" line611="" line612="    /**" line613="        * noraml mode controll" line614="        * M1~M4." line615="        * speed(0~255)." line616="       */" line617="    //% weight=0" line618="    //% blockId=motor_NormalRun block=&quot;|포니봇|%Mecanum|방향|%speed|속도로 이동&quot;" line619="    //% speed.min=0 speed.max=255" line620="    //% DirControll.fieldEditor=&quot;gridpicker&quot; DirControll.fieldOptions.columns=2" line621="    //% group=&quot;모터 제어(기초)&quot;" line622="    export function NomalRun(direction: DirControll, speed: number): void {" line623="        if (!initialized) {" line624="            initPCA9685()" line625="        }" line626="" line627="        speed = speed * 16; // map 255 to 4096" line628="" line629="        if (speed &gt;= 4096) {" line630="            speed = 4095" line631="        }" line632="        if (speed &lt;= -4096) {" line633="            speed = -4095" line634="        }" line635="" line636="        if (direction == 1) {" line637="            // M1 foward" line638="            setPwm(7, 0, speed);" line639="            setPwm(6, 0, 0);" line640="" line641="            // M2 foward" line642="            setPwm(5, 0, speed);" line643="            setPwm(4, 0, 0);" line644="" line645="            // M3 foward" line646="            setPwm(3, 0, 0);" line647="            setPwm(2, 0, speed);" line648="" line649="            // M4 foward" line650="            setPwm(1, 0, 0);" line651="            setPwm(0, 0, speed);" line652="        }" line653="" line654="" line655="        if (direction == 2) {" line656="            // M1 backward" line657="            setPwm(7, 0, 0);" line658="            setPwm(6, 0, speed);" line659="" line660="            // M2 backward" line661="            setPwm(5, 0, 0);" line662="            setPwm(4, 0, speed);" line663="" line664="            // M3 backward" line665="            setPwm(3, 0, speed);" line666="            setPwm(2, 0, 0);" line667="" line668="            // M4 backward" line669="            setPwm(1, 0, speed);" line670="            setPwm(0, 0, 0);" line671="        }" line672="" line673="        if (direction == 3) {" line674="            // M1 foward" line675="            setPwm(7, 0, speed);" line676="            setPwm(6, 0, 0);" line677="" line678="            // M2 foward" line679="            setPwm(5, 0, speed);" line680="            setPwm(4, 0, 0);" line681="" line682="            // M3 backward" line683="            setPwm(3, 0, speed);" line684="            setPwm(2, 0, 0);" line685="" line686="            // M4 backward" line687="            setPwm(1, 0, speed);" line688="            setPwm(0, 0, 0);" line689="        }" line690="" line691="        if (direction == 4) {" line692="            // M1 backward" line693="            setPwm(7, 0, 0);" line694="            setPwm(6, 0, speed);" line695="" line696="            // M2 backward" line697="            setPwm(5, 0, 0);" line698="            setPwm(4, 0, speed);" line699="" line700="            // M3 backward" line701="            setPwm(3, 0, 0);" line702="            setPwm(2, 0, speed);" line703="" line704="            // M4 backward" line705="            setPwm(1, 0, 0);" line706="            setPwm(0, 0, speed);" line707="        }" line708="    }" line709="" line710="    //% blockId=&quot;check_two_line_state&quot;" line711="    //% block=&quot;두 라인 센서의 값이 %state&quot;" line712="    //% state.shadow=&quot;dropdown&quot;" line713="    //% group=&quot;라인 감지 센서&quot;" line714="    //% weight=0" line715="    export function checkTwoLineState(state: twoLineState): boolean {" line716="        const leftSensor = pins.digitalReadPin(DigitalPin.P16);" line717="        const rightSensor = pins.digitalReadPin(DigitalPin.P15);" line718="" line719="        switch (state) {" line720="            case twoLineState.two_line_State_0:" line721="                return leftSensor === 0 &amp;&amp; rightSensor === 0;" line722="            case twoLineState.two_line_State_1:" line723="                return leftSensor === 1 &amp;&amp; rightSensor === 1;" line724="            case twoLineState.two_line_State_2:" line725="                return leftSensor === 1 &amp;&amp; rightSensor === 0;" line726="            case twoLineState.two_line_State_3:" line727="                return leftSensor === 0 &amp;&amp; rightSensor === 1;" line728="            default:" line729="                return false;" line730="        }" line731="    }" line732="" line733="    //% blockId=&quot;check_single_line_sensor&quot;" line734="    //% block=&quot;%channel 라인 센서의 값이 %state&quot;" line735="    //% channel.shadow=&quot;dropdown&quot;" line736="    //% state.shadow=&quot;dropdown&quot;" line737="    //% group=&quot;라인 감지 센서&quot;" line738="    //% weight=0" line739="    export function checkSingleLineSensor(channel: lineSensorChannel, state: lineState): boolean {" line740="        const sensorValue = channel === lineSensorChannel.reft" line741="            ? pins.digitalReadPin(DigitalPin.P16)" line742="            : pins.digitalReadPin(DigitalPin.P15);" line743="" line744="        return sensorValue === state;" line745="    }" line746="" line747="    //% blockId=&quot;read_line_sensor&quot;" line748="    //% block=&quot;%channel 라인 센서 값 읽기&quot;" line749="    //% channel.shadow=&quot;dropdown&quot;" line750="    //% group=&quot;라인 감지 센서&quot;" line751="    //% weight=0" line752="    export function readLineSensor(channel: lineSensorChannel): number {" line753="        return channel === lineSensorChannel.reft" line754="            ? pins.digitalReadPin(DigitalPin.P16)" line755="            : pins.digitalReadPin(DigitalPin.P15);" line756="    }" line757="" line758="    //% blockId=sonar_ping " line759="    //% block=&quot;%unit 단위로 측정한 거리&quot;" line760="    //% unit.shadow=&quot;dropdown&quot;" line761="    //% group=&quot;거리 감지 센서&quot;" line762="    //% weight=0" line763="    export function ping(unit: PingUnit, maxCmDistance = 500): number {" line764="        const trig = DigitalPin.P13; // Trig 핀 기본값" line765="        const echo = DigitalPin.P14; // Echo 핀 기본값" line766="        // send pulse" line767="        pins.setPull(trig, PinPullMode.PullNone);" line768="        pins.digitalWritePin(trig, 0);" line769="        control.waitMicros(2);" line770="        pins.digitalWritePin(trig, 1);" line771="        control.waitMicros(10);" line772="        pins.digitalWritePin(trig, 0);" line773="" line774="        // read pulse" line775="        const d = pins.pulseIn(echo, PulseValue.High, maxCmDistance * 58);" line776="" line777="        switch (unit) {" line778="            case PingUnit.Centimeters: return Math.idiv(d, 58);" line779="            case PingUnit.Inches: return Math.idiv(d, 148);" line780="            default: return d;" line781="        }" line782="    }" line783="" line784="    let _tcs3472: tcs3472 = new tcs3472(0x29)" line785="" line786="    /**" line787="     * 밝기 레벨 센싱" line788="     */" line789="    //% blockId=brickcell_color_tcs34725_get_light" line790="    //% block=&quot;밝기(B) 값 읽기&quot;" line791="    //% group=&quot;색상 감지 센서&quot;" line792="    export function getLight(): number {" line793="        return Math.round(_tcs3472.light())" line794="    }" line795="" line796="    /**" line797="     * R 데이터 센싱" line798="     */" line799="    //% blockId=brickcell_color_tcs34725__get_red" line800="    //% block=&quot;빨간색(R) 색상 값 읽기&quot;" line801="    //% group=&quot;색상 감지 센서&quot;" line802="    export function getRed(): number {" line803="        return Math.round(_tcs3472.rgb()[0]);" line804="    }" line805="" line806="    /**" line807="     * G 데이터 센싱" line808="     */" line809="    //% blockId=brickcell_color_tcs34725_get_green" line810="    //% block=&quot;초록색(G) 색상 값 읽기&quot;" line811="    //% group=&quot;색상 감지 센서&quot;" line812="    export function getGreen(): number {" line813="        return Math.round(_tcs3472.rgb()[1]);" line814="    }" line815="" line816="    /**" line817="     * B 데이터 센싱" line818="     */" line819="    //% blockId=brickcell_color_tcs34725_get_blue" line820="    //% block=&quot;파란색(B) 색상 값 읽기&quot;" line821="    //% group=&quot;색상 감지 센서&quot;" line822="    export function getBlue(): number {" line823="        return Math.round(_tcs3472.rgb()[2]);" line824="    }" line825="" line826="    /**" line827="     * Set the integration time of the colour sensor in ms" line828="     */" line829="    //% blockId=brickcell_color_tcs34725_set_integration_time" line830="    //% block=&quot;색상 통합 시간을 %time ms로 설정&quot;" line831="    //% time.min=0 time.max=612 value.defl=500" line832="    //% group=&quot;색상 감지 센서&quot;" line833="    export function setColourIntegrationTime(time: number): void {" line834="        return _tcs3472.setIntegrationTime(time)" line835="    }" line836="" line837="    /**" line838="     * 감지된 색상이 지정된 색상인지 확인" line839="     */" line840="    //% blockId=color_sensor_is_color" line841="    //% block=&quot;감지된 색상이 %color&quot;" line842="    //% group=&quot;색상 감지 센서&quot;" line843="    export function isColor(color: DetectedColor): boolean {" line844="        const rgb = _tcs3472.rgb();" line845="        const r = rgb[0];" line846="        const g = rgb[1];" line847="        const b = rgb[2];" line848="" line849="        const total = r + g + b;" line850="        if (total === 0) return false;" line851="" line852="        const normR = r / total;" line853="        const normG = g / total;" line854="        const normB = b / total;" line855="" line856="        switch (color) {" line857="            case DetectedColor.Red:" line858="                return normR &gt; 0.5 &amp;&amp; normG &lt; 0.3 &amp;&amp; normB &lt; 0.3;" line859="            case DetectedColor.Green:" line860="                return normG &gt; 0.5 &amp;&amp; normR &lt; 0.3 &amp;&amp; normB &lt; 0.3;" line861="            case DetectedColor.Blue:" line862="                return normB &gt; 0.5 &amp;&amp; normR &lt; 0.3 &amp;&amp; normG &lt; 0.3;" line863="            case DetectedColor.White:" line864="                return r &gt; 200 &amp;&amp; g &gt; 200 &amp;&amp; b &gt; 200;" line865="            case DetectedColor.Black:" line866="                return r &lt; 50 &amp;&amp; g &lt; 50 &amp;&amp; b &lt; 50;" line867="            default:" line868="                return false;" line869="        }" line870="    }" line871="}" numlines="872"></mutation><next><block type="typescript_statement" id="||3[Pnb:$C+:e=7s_TP/"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace smbus {" line1="    export function writeByte(addr: number, register: number, value: number): void {" line2="        let temp = pins.createBuffer(2);" line3="        temp[0] = register;" line4="        temp[1] = value;" line5="        pins.i2cWriteBuffer(addr, temp, false);" line6="    }" line7="    export function writeBuffer(addr: number, register: number, value: Buffer): void {" line8="        let temp2 = pins.createBuffer(value.length + 1);" line9="        temp2[0] = register;" line10="        for (let x2 = 0; x2 &lt; value.length; x2++) {" line11="            temp2[x2 + 1] = value[x2];" line12="        }" line13="        pins.i2cWriteBuffer(addr, temp2, false);" line14="    }" line15="    export function readBuffer(addr: number, register: number, len: number): Buffer {" line16="        let temp3 = pins.createBuffer(1);" line17="        temp3[0] = register;" line18="        pins.i2cWriteBuffer(addr, temp3, false);" line19="        return pins.i2cReadBuffer(addr, len, false);" line20="    }" line21="    function readNumber(addr: number, register: number, fmt: NumberFormat = NumberFormat.UInt8LE): number {" line22="        let temp4 = pins.createBuffer(1);" line23="        temp4[0] = register;" line24="        pins.i2cWriteBuffer(addr, temp4, false);" line25="        return pins.i2cReadNumber(addr, fmt, false);" line26="    }" line27="    export function unpack(fmt: string, buf: Buffer): number[] {" line28="        let le: boolean = true;" line29="        let offset: number = 0;" line30="        let result3: number[] = [];" line31="        let num_format: NumberFormat = 0;" line32="        for (let c = 0; c &lt; fmt.length; c++) {" line33="            switch (fmt.charAt(c)) {" line34="                case '&lt;':" line35="                    le = true;" line36="                    continue;" line37="                case '&gt;':" line38="                    le = false;" line39="                    continue;" line40="                case 'c':" line41="                case 'B':" line42="                    num_format = le ? NumberFormat.UInt8LE : NumberFormat.UInt8BE; break;" line43="                case 'b':" line44="                    num_format = le ? NumberFormat.Int8LE : NumberFormat.Int8BE; break;" line45="                case 'H':" line46="                    num_format = le ? NumberFormat.UInt16LE : NumberFormat.UInt16BE; break;" line47="                case 'h':" line48="                    num_format = le ? NumberFormat.Int16LE : NumberFormat.Int16BE; break;" line49="            }" line50="            result3.push(buf.getNumber(num_format, offset));" line51="            offset += pins.sizeOf(num_format);" line52="        }" line53="        return result3;" line54="    }" line55="}" numlines="56"></mutation></block></next></block></statement></block></xml>