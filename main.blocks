<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="2QB-DvT3~.EX{{)d`DOt" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="=Tl05ly;V0p)bfZhp4qY"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace motor {" line1="    const PCA9685_ADDRESS = 0x40" line2="    const MODE1 = 0x00" line3="    const MODE2 = 0x01" line4="    const SUBADR1 = 0x02" line5="    const SUBADR2 = 0x03" line6="    const SUBADR3 = 0x04" line7="    const PRESCALE = 0xFE" line8="    const LED0_ON_L = 0x06" line9="    const LED0_ON_H = 0x07" line10="    const LED0_OFF_L = 0x08" line11="    const LED0_OFF_H = 0x09" line12="    const ALL_LED_ON_L = 0xFA" line13="    const ALL_LED_ON_H = 0xFB" line14="    const ALL_LED_OFF_L = 0xFC" line15="    const ALL_LED_OFF_H = 0xFD" line16="" line17="    const STP_CHA_L = 2047" line18="    const STP_CHA_H = 4095" line19="" line20="    const STP_CHB_L = 1" line21="    const STP_CHB_H = 2047" line22="" line23="    const STP_CHC_L = 1023" line24="    const STP_CHC_H = 3071" line25="" line26="    const STP_CHD_L = 3071" line27="    const STP_CHD_H = 1023" line28="" line29="" line30="    const BYG_CHA_L = 3071" line31="    const BYG_CHA_H = 1023" line32="" line33="    const BYG_CHB_L = 1023" line34="    const BYG_CHB_H = 3071" line35="" line36="    const BYG_CHC_L = 4095" line37="    const BYG_CHC_H = 2047" line38="" line39="    const BYG_CHD_L = 2047" line40="    const BYG_CHD_H = 4095" line41="" line42="    /** " line43="     * The user can choose the mecanum mode direction " line44="     */" line45="    export enum Mecanum {" line46="        //% block=&quot;↖️&quot;" line47="        lf = 1," line48="        //% block=&quot;↑&quot;" line49="        ff = 2," line50="        //% block=&quot;↗&quot;" line51="        rf = 3," line52="        //% block=&quot;←&quot;" line53="        ll = 4," line54="        //% block=&quot;s&quot;" line55="        ss = 5," line56="        //% block=&quot;→&quot;" line57="        rr = 6," line58="        //% block=&quot;↙&quot;" line59="        lb = 7," line60="        //% block=&quot;↓&quot;" line61="        bb = 8," line62="        //% block=&quot;↘&quot;" line63="        rb = 9" line64="    }" line65="" line66="    /** " line67="    * The user can choose the mobility controll" line68="    */" line69="    export enum DirControll {" line70="        //% block=&quot;↑&quot;" line71="        foward = 1," line72="        //% block=&quot;↓&quot;" line73="        backward = 2," line74="        //% block=&quot;↶&quot;" line75="        CWRotate = 3," line76="        //% block=&quot;↷&quot;" line77="        CCWRotate = 4," line78="    }" line79="" line80="    /**" line81="     * The user can choose the step motor model." line82="     */" line83="    export enum Stepper {" line84="        //% block=&quot;42&quot;" line85="        Ste1 = 1," line86="        //% block=&quot;28&quot;" line87="        Ste2 = 2" line88="    }" line89="" line90="    /**" line91="     * The user can select the 8 steering gear controller." line92="     */" line93="    export enum Servos {" line94="        S1 = 0x01," line95="        S2 = 0x02," line96="        S3 = 0x03," line97="        S4 = 0x04," line98="        S5 = 0x05," line99="        S6 = 0x06," line100="        S7 = 0x07," line101="        S8 = 0x08" line102="    }" line103="" line104="    /**" line105="     * The user selects the 4-way dc motor." line106="     */" line107="    export enum Motors {" line108="        M1 = 0x1," line109="        M2 = 0x2," line110="        M3 = 0x3," line111="        M4 = 0x4" line112="    }" line113="" line114="    /**" line115="     * The user defines the motor rotation direction." line116="     */" line117="    export enum Dir {" line118="        //% blockId=&quot;정회전&quot; block=&quot;정회전&quot;" line119="        CW = 1," line120="        //% blockId=&quot;역회전&quot; block=&quot;역회전&quot;" line121="        CCW = -1," line122="    }" line123="" line124="    /**" line125="     * The user can select a two-path stepper motor controller." line126="     */" line127="    export enum Steppers {" line128="        M1_M2 = 0x1," line129="        M3_M4 = 0x2" line130="    }" line131="" line132="" line133="" line134="    let initialized = false" line135="" line136="    function i2cWrite(addr: number, reg: number, value: number) {" line137="        let buf = pins.createBuffer(2)" line138="        buf[0] = reg" line139="        buf[1] = value" line140="        pins.i2cWriteBuffer(addr, buf)" line141="    }" line142="" line143="    function i2cCmd(addr: number, value: number) {" line144="        let buf2 = pins.createBuffer(1)" line145="        buf2[0] = value" line146="        pins.i2cWriteBuffer(addr, buf2)" line147="    }" line148="" line149="    function i2cRead(addr: number, reg: number) {" line150="        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);" line151="        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);" line152="        return val;" line153="    }" line154="" line155="    function initPCA9685(): void {" line156="        i2cWrite(PCA9685_ADDRESS, MODE1, 0x00)" line157="        setFreq(50);" line158="        initialized = true" line159="    }" line160="" line161="    function setFreq(freq: number): void {" line162="        // Constrain the frequency" line163="        let prescaleval = 25000000;" line164="        prescaleval /= 4096;" line165="        prescaleval /= freq;" line166="        prescaleval -= 1;" line167="        let prescale = prescaleval;//Math.floor(prescaleval + 0.5);" line168="        let oldmode = i2cRead(PCA9685_ADDRESS, MODE1);" line169="        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep" line170="        i2cWrite(PCA9685_ADDRESS, MODE1, newmode); // go to sleep" line171="        i2cWrite(PCA9685_ADDRESS, PRESCALE, prescale); // set the prescaler" line172="        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode);" line173="        control.waitMicros(5000);" line174="        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode | 0xa1);" line175="    }" line176="" line177="    function setPwm(channel: number, on: number, off: number): void {" line178="        if (channel &lt; 0 || channel &gt; 15)" line179="            return;" line180="" line181="        let buf3 = pins.createBuffer(5);" line182="        buf3[0] = LED0_ON_L + 4 * channel;" line183="        buf3[1] = on &amp; 0xff;" line184="        buf3[2] = (on &gt;&gt; 8) &amp; 0xff;" line185="        buf3[3] = off &amp; 0xff;" line186="        buf3[4] = (off &gt;&gt; 8) &amp; 0xff;" line187="        pins.i2cWriteBuffer(PCA9685_ADDRESS, buf3);" line188="    }" line189="" line190="" line191="    function setStepper_28(index: number, dir: boolean): void {" line192="        if (index == 1) {" line193="            if (dir) {" line194="                setPwm(4, STP_CHA_L, STP_CHA_H);" line195="                setPwm(6, STP_CHB_L, STP_CHB_H);" line196="                setPwm(5, STP_CHC_L, STP_CHC_H);" line197="                setPwm(7, STP_CHD_L, STP_CHD_H);" line198="            } else {" line199="                setPwm(7, STP_CHA_L, STP_CHA_H);" line200="                setPwm(5, STP_CHB_L, STP_CHB_H);" line201="                setPwm(6, STP_CHC_L, STP_CHC_H);" line202="                setPwm(4, STP_CHD_L, STP_CHD_H);" line203="            }" line204="        } else {" line205="            if (dir) {" line206="                setPwm(0, STP_CHA_L, STP_CHA_H);" line207="                setPwm(2, STP_CHB_L, STP_CHB_H);" line208="                setPwm(1, STP_CHC_L, STP_CHC_H);" line209="                setPwm(3, STP_CHD_L, STP_CHD_H);" line210="            } else {" line211="                setPwm(3, STP_CHA_L, STP_CHA_H);" line212="                setPwm(1, STP_CHB_L, STP_CHB_H);" line213="                setPwm(2, STP_CHC_L, STP_CHC_H);" line214="                setPwm(0, STP_CHD_L, STP_CHD_H);" line215="            }" line216="        }" line217="    }" line218="" line219="" line220="    function setStepper_42(index: number, dir: boolean): void {" line221="        if (index == 1) {" line222="            if (dir) {" line223="                setPwm(7, BYG_CHA_L, BYG_CHA_H);" line224="                setPwm(6, BYG_CHB_L, BYG_CHB_H);" line225="                setPwm(5, BYG_CHC_L, BYG_CHC_H);" line226="                setPwm(4, BYG_CHD_L, BYG_CHD_H);" line227="            } else {" line228="                setPwm(7, BYG_CHC_L, BYG_CHC_H);" line229="                setPwm(6, BYG_CHD_L, BYG_CHD_H);" line230="                setPwm(5, BYG_CHA_L, BYG_CHA_H);" line231="                setPwm(4, BYG_CHB_L, BYG_CHB_H);" line232="            }" line233="        } else {" line234="            if (dir) {" line235="                setPwm(3, BYG_CHA_L, BYG_CHA_H);" line236="                setPwm(2, BYG_CHB_L, BYG_CHB_H);" line237="                setPwm(1, BYG_CHC_L, BYG_CHC_H);" line238="                setPwm(0, BYG_CHD_L, BYG_CHD_H);" line239="            } else {" line240="                setPwm(3, BYG_CHC_L, BYG_CHC_H);" line241="                setPwm(2, BYG_CHD_L, BYG_CHD_H);" line242="                setPwm(1, BYG_CHA_L, BYG_CHA_H);" line243="                setPwm(0, BYG_CHB_L, BYG_CHB_H);" line244="            }" line245="        }" line246="    }" line247="" line248="" line249="    /**" line250="     * Steering gear control function." line251="     * S1~S8." line252="     * 0°~180°." line253="    */" line254="    //% blockId=motor_servo block=&quot;|%index|서보모터|%degree|각도로 이동&quot;" line255="    //% weight=0" line256="    //% degree.min=0 degree.max=180" line257="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=4" line258="    //% group=&quot;서보모터 제어&quot;" line259="    export function servo(index: Servos, degree: number): void {" line260="        if (!initialized) {" line261="            initPCA9685()" line262="        }" line263="        // 50hz" line264="        let v_us = (degree * 1800 / 180 + 600) // 0.6ms ~ 2.4ms" line265="        let value = v_us * 4096 / 20000" line266="        setPwm(index + 7, 0, value)" line267="    }" line268="" line269="    /**" line270="     * Execute a motor" line271="     * M1~M4." line272="     * speed(0~255)." line273="    */" line274="    //% weight=0" line275="    //% blockId=motor_MotorRun block=&quot;|%index|모터|%Dir|방향|%speed|속도로 회전&quot;" line276="    //% speed.min=0 speed.max=255" line277="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2" line278="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2" line279="    //% group=&quot;모터 제어(심화)&quot;" line280="    export function MotorRun(index: Motors, direction: Dir, speed: number): void {" line281="" line282="        if (!initialized) {" line283="            initPCA9685()" line284="        }" line285="" line286="        if (index === 3 || index === 4) {" line287="            direction = direction * -1;" line288="        }" line289="" line290="        speed = speed * 16 * direction; // map 255 to 4096" line291="        if (speed &gt;= 4096) {" line292="            speed = 4095" line293="        }" line294="        if (speed &lt;= -4096) {" line295="            speed = -4095" line296="        }" line297="        if (index &gt; 4 || index &lt;= 0)" line298="            return" line299="        let pn = (4 - index) * 2" line300="        let pp = (4 - index) * 2 + 1" line301="        if (speed &gt;= 0) {" line302="            setPwm(pp, 0, speed)" line303="            setPwm(pn, 0, 0)" line304="        } else {" line305="            setPwm(pp, 0, 0)" line306="            setPwm(pn, 0, -speed)" line307="        }" line308="    }" line309="" line310="    /**" line311="     * mecanum mode controll" line312="     * M1~M4." line313="     * speed(0~255)." line314="    */" line315="    //% weight=0" line316="    //% blockId=motor_MecanumRun block=&quot;|메카넘|%Mecanum|방향|%speed|속도로 이동&quot;" line317="    //% speed.min=0 speed.max=255" line318="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=3" line319="    //% group=&quot;모터 제어(기초)&quot;" line320="    export function MecanumRun(direction: Mecanum, speed: number): void {" line321="        if (!initialized) {" line322="            initPCA9685()" line323="        }" line324="" line325="        speed = speed * 16; // map 255 to 4096" line326="" line327="        if (speed &gt;= 4096) {" line328="            speed = 4095" line329="        }" line330="        if (speed &lt;= -4096) {" line331="            speed = -4095" line332="        }" line333="        // motor controll" line334="        // 1  2  3  |  ↖️  ↑  ↗" line335="        // 4  5  6  |  ←   s  →" line336="        // 7  8  9  |  ↙  ↓  ↘" line337="        if (direction == 1) {" line338="            // M1 foward" line339="            setPwm(7, 0, speed);" line340="            setPwm(6, 0, 0);" line341="" line342="            // M2 stop" line343="            setPwm(5, 0, 0);" line344="            setPwm(4, 0, 0);" line345="" line346="            // M3 foward" line347="            setPwm(3, 0, 0);" line348="            setPwm(2, 0, speed);" line349="" line350="            // M4 stop" line351="            setPwm(1, 0, 0);" line352="            setPwm(0, 0, 0);" line353="        }" line354="" line355="        if (direction == 2) {" line356="            // M1 foward" line357="            setPwm(7, 0, speed);" line358="            setPwm(6, 0, 0);" line359="" line360="            // M2 foward" line361="            setPwm(5, 0, speed);" line362="            setPwm(4, 0, 0);" line363="" line364="            // M3 foward" line365="            setPwm(3, 0, 0);" line366="            setPwm(2, 0, speed);" line367="" line368="            // M4 foward" line369="            setPwm(1, 0, 0);" line370="            setPwm(0, 0, speed);" line371="        }" line372="" line373="        if (direction == 3) {" line374="            // M1 stop" line375="            setPwm(7, 0, 0);" line376="            setPwm(6, 0, 0);" line377="" line378="            // M2 foward" line379="            setPwm(5, 0, speed);" line380="            setPwm(4, 0, 0);" line381="" line382="            // M3 stop" line383="            setPwm(3, 0, 0);" line384="            setPwm(2, 0, 0);" line385="" line386="            // M4 foward" line387="            setPwm(1, 0, 0);" line388="            setPwm(0, 0, speed);" line389="        }" line390="" line391="        if (direction == 4) {" line392="            // M1 foward" line393="            setPwm(7, 0, speed);" line394="            setPwm(6, 0, 0);" line395="" line396="            // M2 backward" line397="            setPwm(5, 0, 0);" line398="            setPwm(4, 0, speed);" line399="" line400="            // M3 foward" line401="            setPwm(3, 0, 0);" line402="            setPwm(2, 0, speed);" line403="" line404="            // M4 backward" line405="            setPwm(1, 0, speed);" line406="            setPwm(0, 0, 0);" line407="        }" line408="" line409="        if (direction == 5) {" line410="            // M1 stop" line411="            setPwm(7, 0, 0);" line412="            setPwm(6, 0, 0);" line413="" line414="            // M2 stop" line415="            setPwm(5, 0, 0);" line416="            setPwm(4, 0, 0);" line417="" line418="            // M3 stop" line419="            setPwm(3, 0, 0);" line420="            setPwm(2, 0, 0);" line421="" line422="            // M4 stop" line423="            setPwm(1, 0, 0);" line424="            setPwm(0, 0, 0);" line425="        }" line426="" line427="        if (direction == 6) {" line428="            // M1 backward" line429="            setPwm(7, 0, 0);" line430="            setPwm(6, 0, speed);" line431="" line432="            // M2 foward" line433="            setPwm(5, 0, speed);" line434="            setPwm(4, 0, 0);" line435="" line436="            // M3 backward" line437="            setPwm(3, 0, speed);" line438="            setPwm(2, 0, 0);" line439="" line440="            // M4 foward" line441="            setPwm(1, 0, 0);" line442="            setPwm(0, 0, speed);" line443="        }" line444="" line445="        if (direction == 7) {" line446="            // M1 stop" line447="            setPwm(7, 0, 0);" line448="            setPwm(6, 0, 0);" line449="" line450="            // M2 backward" line451="            setPwm(5, 0, 0);" line452="            setPwm(4, 0, speed);" line453="" line454="            // M3 stop" line455="            setPwm(3, 0, 0);" line456="            setPwm(2, 0, 0);" line457="" line458="            // M4 backward" line459="            setPwm(1, 0, speed);" line460="            setPwm(0, 0, 0);" line461="        }" line462="" line463="        if (direction == 8) {" line464="            // M1 backward" line465="            setPwm(7, 0, 0);" line466="            setPwm(6, 0, speed);" line467="" line468="            // M2 backward" line469="            setPwm(5, 0, 0);" line470="            setPwm(4, 0, speed);" line471="" line472="            // M3 backward" line473="            setPwm(3, 0, speed);" line474="            setPwm(2, 0, 0);" line475="" line476="            // M4 backward" line477="            setPwm(1, 0, speed);" line478="            setPwm(0, 0, 0);" line479="        }" line480="" line481="        if (direction == 9) {" line482="            // M1 backward" line483="            setPwm(7, 0, 0);" line484="            setPwm(6, 0, speed);" line485="" line486="            // M2 stop" line487="            setPwm(5, 0, 0);" line488="            setPwm(4, 0, 0);" line489="" line490="            // M3 backward" line491="            setPwm(3, 0, speed);" line492="            setPwm(2, 0, 0);" line493="" line494="            // M4 stop" line495="            setPwm(1, 0, 0);" line496="            setPwm(0, 0, 0);" line497="        }" line498="    }" line499="" line500="    /**" line501="     * Stop the dc motor." line502="    */" line503="    //% weight=0" line504="    //% blockId=motor_motorStop block=&quot;|%index|모터 정지&quot;" line505="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2 " line506="    //% group=&quot;모터 제어(심화)&quot;" line507="    export function motorStop(index: Motors) {" line508="        setPwm((4 - index) * 2, 0, 0);" line509="        setPwm((4 - index) * 2 + 1, 0, 0);" line510="    }" line511="" line512="    /**" line513="     * Stop all motors" line514="    */" line515="    //% weight=20" line516="    //% blockId=motor_motorStopAll block=&quot;|모든 모터 정지&quot;" line517="    //% group=&quot;모터 제어(기초)&quot;" line518="    export function motorStopAll(): void {" line519="        for (let idx = 1; idx &lt;= 4; idx++) {" line520="            motorStop(idx);" line521="        }" line522="    }" line523="" line524="    /**" line525="        * noraml mode controll" line526="        * M1~M4." line527="        * speed(0~255)." line528="       */" line529="    //% weight=0" line530="    //% blockId=motor_NormalRun block=&quot;|포니봇|%Mecanum|방향|%speed|속도로 이동&quot;" line531="    //% speed.min=0 speed.max=255" line532="    //% DirControll.fieldEditor=&quot;gridpicker&quot; DirControll.fieldOptions.columns=2" line533="    //% group=&quot;모터 제어(기초)&quot;" line534="    export function NomalRun(direction: DirControll, speed: number): void {" line535="        if (!initialized) {" line536="            initPCA9685()" line537="        }" line538="" line539="        speed = speed * 16; // map 255 to 4096" line540="" line541="        if (speed &gt;= 4096) {" line542="            speed = 4095" line543="        }" line544="        if (speed &lt;= -4096) {" line545="            speed = -4095" line546="        }" line547="" line548="        if (direction == 1) {" line549="            // M1 foward" line550="            setPwm(7, 0, speed);" line551="            setPwm(6, 0, 0);" line552="" line553="            // M2 foward" line554="            setPwm(5, 0, speed);" line555="            setPwm(4, 0, 0);" line556="" line557="            // M3 foward" line558="            setPwm(3, 0, 0);" line559="            setPwm(2, 0, speed);" line560="" line561="            // M4 foward" line562="            setPwm(1, 0, 0);" line563="            setPwm(0, 0, speed);" line564="        }" line565="" line566="" line567="        if (direction == 2) {" line568="            // M1 backward" line569="            setPwm(7, 0, 0);" line570="            setPwm(6, 0, speed);" line571="" line572="            // M2 backward" line573="            setPwm(5, 0, 0);" line574="            setPwm(4, 0, speed);" line575="" line576="            // M3 backward" line577="            setPwm(3, 0, speed);" line578="            setPwm(2, 0, 0);" line579="" line580="            // M4 backward" line581="            setPwm(1, 0, speed);" line582="            setPwm(0, 0, 0);" line583="        }" line584="" line585="        if (direction == 3) {" line586="            // M1 foward" line587="            setPwm(7, 0, speed);" line588="            setPwm(6, 0, 0);" line589="" line590="            // M2 foward" line591="            setPwm(5, 0, speed);" line592="            setPwm(4, 0, 0);" line593="" line594="            // M3 backward" line595="            setPwm(3, 0, speed);" line596="            setPwm(2, 0, 0);" line597="" line598="            // M4 backward" line599="            setPwm(1, 0, speed);" line600="            setPwm(0, 0, 0);" line601="        }" line602="" line603="        if (direction == 4) {" line604="            // M1 backward" line605="            setPwm(7, 0, 0);" line606="            setPwm(6, 0, speed);" line607="" line608="            // M2 backward" line609="            setPwm(5, 0, 0);" line610="            setPwm(4, 0, speed);" line611="" line612="            // M3 backward" line613="            setPwm(3, 0, 0);" line614="            setPwm(2, 0, speed);" line615="" line616="            // M4 backward" line617="            setPwm(1, 0, 0);" line618="            setPwm(0, 0, speed);" line619="        }" line620="    }" line621="" line622="}" numlines="623"></mutation></block></statement></block></xml>