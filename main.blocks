<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="DhHPEsLN@cCk~@~vsq}J" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="D:+91EdIrSryH~4#j!!4"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="declare interface Math {&#13;" line1="    floor(x: number): number;&#13;" line2="}" numlines="3"></mutation><next><block type="typescript_statement" id="}t]?9/Ud:57=Meoy|Be#"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace AIponybot {&#13;" line1="    /**&#13;" line2="    * ---------------PCA9685-------------------&#13;" line3="    */&#13;" line4="    const PCA9685_ADDRESS = 0x40&#13;" line5="    const MODE1 = 0x00&#13;" line6="    const MODE2 = 0x01&#13;" line7="    const SUBADR1 = 0x02&#13;" line8="    const SUBADR2 = 0x03&#13;" line9="    const SUBADR3 = 0x04&#13;" line10="    const PRESCALE = 0xFE&#13;" line11="    const LED0_ON_L = 0x06&#13;" line12="    const LED0_ON_H = 0x07&#13;" line13="    const LED0_OFF_L = 0x08&#13;" line14="    const LED0_OFF_H = 0x09&#13;" line15="    const ALL_LED_ON_L = 0xFA&#13;" line16="    const ALL_LED_ON_H = 0xFB&#13;" line17="    const ALL_LED_OFF_L = 0xFC&#13;" line18="    const ALL_LED_OFF_H = 0xFD&#13;" line19="&#13;" line20="    const STP_CHA_L = 2047&#13;" line21="    const STP_CHA_H = 4095&#13;" line22="&#13;" line23="    const STP_CHB_L = 1&#13;" line24="    const STP_CHB_H = 2047&#13;" line25="&#13;" line26="    const STP_CHC_L = 1023&#13;" line27="    const STP_CHC_H = 3071&#13;" line28="&#13;" line29="    const STP_CHD_L = 3071&#13;" line30="    const STP_CHD_H = 1023&#13;" line31="&#13;" line32="&#13;" line33="    const BYG_CHA_L = 3071&#13;" line34="    const BYG_CHA_H = 1023&#13;" line35="&#13;" line36="    const BYG_CHB_L = 1023&#13;" line37="    const BYG_CHB_H = 3071&#13;" line38="&#13;" line39="    const BYG_CHC_L = 4095&#13;" line40="    const BYG_CHC_H = 2047&#13;" line41="&#13;" line42="    const BYG_CHD_L = 2047&#13;" line43="    const BYG_CHD_H = 4095&#13;" line44="&#13;" line45="    /** &#13;" line46="     * The user can choose the mecanum mode direction &#13;" line47="     */&#13;" line48="    export enum Mecanum {&#13;" line49="        //% block=&quot;↖&quot;&#13;" line50="        lf = 1,&#13;" line51="        //% block=&quot;↑&quot;&#13;" line52="        ff = 2,&#13;" line53="        //% block=&quot;↗&quot;&#13;" line54="        rf = 3,&#13;" line55="        //% block=&quot;←&quot;&#13;" line56="        ll = 4,&#13;" line57="        //% block=&quot;s&quot;&#13;" line58="        ss = 5,&#13;" line59="        //% block=&quot;→&quot;&#13;" line60="        rr = 6,&#13;" line61="        //% block=&quot;↙&quot;&#13;" line62="        lb = 7,&#13;" line63="        //% block=&quot;↓&quot;&#13;" line64="        bb = 8,&#13;" line65="        //% block=&quot;↘&quot;&#13;" line66="        rb = 9&#13;" line67="    }&#13;" line68="&#13;" line69="    /** &#13;" line70="    * The user can choose the mobility controll&#13;" line71="    */&#13;" line72="    export enum DirControll {&#13;" line73="        //% block=&quot;↑&quot;&#13;" line74="        foward = 1,&#13;" line75="        //% block=&quot;↓&quot;&#13;" line76="        backward = 2,&#13;" line77="        //% block=&quot;↶&quot;&#13;" line78="        CWRotate = 3,&#13;" line79="        //% block=&quot;↷&quot;&#13;" line80="        CCWRotate = 4,&#13;" line81="    }&#13;" line82="&#13;" line83="    /**&#13;" line84="     * The user can choose the step motor model.&#13;" line85="     */&#13;" line86="    export enum Stepper {&#13;" line87="        //% block=&quot;42&quot;&#13;" line88="        Ste1 = 1,&#13;" line89="        //% block=&quot;28&quot;&#13;" line90="        Ste2 = 2&#13;" line91="    }&#13;" line92="&#13;" line93="    /**&#13;" line94="     * The user can select the 8 steering gear controller.&#13;" line95="     */&#13;" line96="    export enum Servos {&#13;" line97="        S1 = 0x01,&#13;" line98="        S2 = 0x02,&#13;" line99="        S3 = 0x03,&#13;" line100="        S4 = 0x04,&#13;" line101="        S5 = 0x05,&#13;" line102="        S6 = 0x06,&#13;" line103="        S7 = 0x07,&#13;" line104="        S8 = 0x08&#13;" line105="    }&#13;" line106="&#13;" line107="    /**&#13;" line108="     * The user selects the 4-way dc motor.&#13;" line109="     */&#13;" line110="    export enum Motors {&#13;" line111="        M1 = 0x1,&#13;" line112="        M2 = 0x2,&#13;" line113="        M3 = 0x3,&#13;" line114="        M4 = 0x4&#13;" line115="    }&#13;" line116="&#13;" line117="    /**&#13;" line118="     * The user defines the motor rotation direction.&#13;" line119="     */&#13;" line120="    export enum Dir {&#13;" line121="        //% blockId=&quot;정회전&quot; block=&quot;정회전&quot;&#13;" line122="        CW = 1,&#13;" line123="        //% blockId=&quot;역회전&quot; block=&quot;역회전&quot;&#13;" line124="        CCW = -1,&#13;" line125="    }&#13;" line126="&#13;" line127="    /**&#13;" line128="     * The user can select a two-path stepper motor controller.&#13;" line129="     */&#13;" line130="    export enum Steppers {&#13;" line131="        M1_M2 = 0x1,&#13;" line132="        M3_M4 = 0x2&#13;" line133="    }&#13;" line134="&#13;" line135="    let initialized = false&#13;" line136="&#13;" line137="    function i2cWrite(addr: number, reg: number, value: number) {&#13;" line138="        let buf = pins.createBuffer(2)&#13;" line139="        buf[0] = reg&#13;" line140="        buf[1] = value&#13;" line141="        pins.i2cWriteBuffer(addr, buf)&#13;" line142="    }&#13;" line143="&#13;" line144="    function i2cCmd(addr: number, value: number) {&#13;" line145="        let buf2 = pins.createBuffer(1)&#13;" line146="        buf2[0] = value&#13;" line147="        pins.i2cWriteBuffer(addr, buf2)&#13;" line148="    }&#13;" line149="&#13;" line150="    function i2cRead(addr: number, reg: number) {&#13;" line151="        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);&#13;" line152="        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);&#13;" line153="        return val;&#13;" line154="    }&#13;" line155="&#13;" line156="    function initPCA9685(): void {&#13;" line157="        i2cWrite(PCA9685_ADDRESS, MODE1, 0x00)&#13;" line158="        setFreq(50);&#13;" line159="        initialized = true&#13;" line160="    }&#13;" line161="&#13;" line162="    function setFreq(freq: number): void {&#13;" line163="        // Constrain the frequency&#13;" line164="        let prescaleval = 25000000;&#13;" line165="        prescaleval /= 4096;&#13;" line166="        prescaleval /= freq;&#13;" line167="        prescaleval -= 1;&#13;" line168="        let prescale = prescaleval;//Math.floor(prescaleval + 0.5);&#13;" line169="        let oldmode = i2cRead(PCA9685_ADDRESS, MODE1);&#13;" line170="        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep&#13;" line171="        i2cWrite(PCA9685_ADDRESS, MODE1, newmode); // go to sleep&#13;" line172="        i2cWrite(PCA9685_ADDRESS, PRESCALE, prescale); // set the prescaler&#13;" line173="        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode);&#13;" line174="        control.waitMicros(5000);&#13;" line175="        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode | 0xa1);&#13;" line176="    }&#13;" line177="&#13;" line178="    function setPwm(channel: number, on: number, off: number): void {&#13;" line179="        if (channel &lt; 0 || channel &gt; 15)&#13;" line180="            return;&#13;" line181="&#13;" line182="        let buf3 = pins.createBuffer(5);&#13;" line183="        buf3[0] = LED0_ON_L + 4 * channel;&#13;" line184="        buf3[1] = on &amp; 0xff;&#13;" line185="        buf3[2] = (on &gt;&gt; 8) &amp; 0xff;&#13;" line186="        buf3[3] = off &amp; 0xff;&#13;" line187="        buf3[4] = (off &gt;&gt; 8) &amp; 0xff;&#13;" line188="        pins.i2cWriteBuffer(PCA9685_ADDRESS, buf3);&#13;" line189="    }&#13;" line190="&#13;" line191="&#13;" line192="    function setStepper_28(index: number, dir: boolean): void {&#13;" line193="        if (index == 1) {&#13;" line194="            if (dir) {&#13;" line195="                setPwm(4, STP_CHA_L, STP_CHA_H);&#13;" line196="                setPwm(6, STP_CHB_L, STP_CHB_H);&#13;" line197="                setPwm(5, STP_CHC_L, STP_CHC_H);&#13;" line198="                setPwm(7, STP_CHD_L, STP_CHD_H);&#13;" line199="            } else {&#13;" line200="                setPwm(7, STP_CHA_L, STP_CHA_H);&#13;" line201="                setPwm(5, STP_CHB_L, STP_CHB_H);&#13;" line202="                setPwm(6, STP_CHC_L, STP_CHC_H);&#13;" line203="                setPwm(4, STP_CHD_L, STP_CHD_H);&#13;" line204="            }&#13;" line205="        } else {&#13;" line206="            if (dir) {&#13;" line207="                setPwm(0, STP_CHA_L, STP_CHA_H);&#13;" line208="                setPwm(2, STP_CHB_L, STP_CHB_H);&#13;" line209="                setPwm(1, STP_CHC_L, STP_CHC_H);&#13;" line210="                setPwm(3, STP_CHD_L, STP_CHD_H);&#13;" line211="            } else {&#13;" line212="                setPwm(3, STP_CHA_L, STP_CHA_H);&#13;" line213="                setPwm(1, STP_CHB_L, STP_CHB_H);&#13;" line214="                setPwm(2, STP_CHC_L, STP_CHC_H);&#13;" line215="                setPwm(0, STP_CHD_L, STP_CHD_H);&#13;" line216="            }&#13;" line217="        }&#13;" line218="    }&#13;" line219="&#13;" line220="&#13;" line221="    function setStepper_42(index: number, dir: boolean): void {&#13;" line222="        if (index == 1) {&#13;" line223="            if (dir) {&#13;" line224="                setPwm(7, BYG_CHA_L, BYG_CHA_H);&#13;" line225="                setPwm(6, BYG_CHB_L, BYG_CHB_H);&#13;" line226="                setPwm(5, BYG_CHC_L, BYG_CHC_H);&#13;" line227="                setPwm(4, BYG_CHD_L, BYG_CHD_H);&#13;" line228="            } else {&#13;" line229="                setPwm(7, BYG_CHC_L, BYG_CHC_H);&#13;" line230="                setPwm(6, BYG_CHD_L, BYG_CHD_H);&#13;" line231="                setPwm(5, BYG_CHA_L, BYG_CHA_H);&#13;" line232="                setPwm(4, BYG_CHB_L, BYG_CHB_H);&#13;" line233="            }&#13;" line234="        } else {&#13;" line235="            if (dir) {&#13;" line236="                setPwm(3, BYG_CHA_L, BYG_CHA_H);&#13;" line237="                setPwm(2, BYG_CHB_L, BYG_CHB_H);&#13;" line238="                setPwm(1, BYG_CHC_L, BYG_CHC_H);&#13;" line239="                setPwm(0, BYG_CHD_L, BYG_CHD_H);&#13;" line240="            } else {&#13;" line241="                setPwm(3, BYG_CHC_L, BYG_CHC_H);&#13;" line242="                setPwm(2, BYG_CHD_L, BYG_CHD_H);&#13;" line243="                setPwm(1, BYG_CHA_L, BYG_CHA_H);&#13;" line244="                setPwm(0, BYG_CHB_L, BYG_CHB_H);&#13;" line245="            }&#13;" line246="        }&#13;" line247="    }&#13;" line248="&#13;" line249="&#13;" line250="    /**&#13;" line251="     * Steering gear control function.&#13;" line252="     * S1~S8.&#13;" line253="     * 0°~180°.&#13;" line254="    */&#13;" line255="    //% blockId=motor_servo block=&quot;|%index|서보모터|%degree|각도로 이동&quot;&#13;" line256="    //% weight=0&#13;" line257="    //% degree.min=0 degree.max=180&#13;" line258="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=4&#13;" line259="    //% group=&quot;서보모터 제어&quot;&#13;" line260="    export function servo(index: Servos, degree: number): void {&#13;" line261="        if (!initialized) {&#13;" line262="            initPCA9685()&#13;" line263="        }&#13;" line264="        // 50hz&#13;" line265="        let v_us = (degree * 1800 / 180 + 600) // 0.6ms ~ 2.4ms&#13;" line266="        let value = v_us * 4096 / 20000&#13;" line267="        setPwm(index + 7, 0, value)&#13;" line268="    }&#13;" line269="&#13;" line270="    /**&#13;" line271="     * Execute a motor&#13;" line272="     * M1~M4.&#13;" line273="     * speed(0~255).&#13;" line274="    */&#13;" line275="    //% weight=0&#13;" line276="    //% blockId=motor_MotorRun block=&quot;|%index|모터|%Dir|방향|%speed|속도로 회전&quot;&#13;" line277="    //% speed.min=0 speed.max=255&#13;" line278="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2&#13;" line279="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2&#13;" line280="    //% group=&quot;모터 제어(심화)&quot;&#13;" line281="    export function MotorRun(index: Motors, direction: Dir, speed: number): void {&#13;" line282="&#13;" line283="        if (!initialized) {&#13;" line284="            initPCA9685()&#13;" line285="        }&#13;" line286="&#13;" line287="        if (index === 3 || index === 4) {&#13;" line288="            direction = direction * -1;&#13;" line289="        }&#13;" line290="&#13;" line291="        speed = speed * 16 * direction; // map 255 to 4096&#13;" line292="        if (speed &gt;= 4096) {&#13;" line293="            speed = 4095&#13;" line294="        }&#13;" line295="        if (speed &lt;= -4096) {&#13;" line296="            speed = -4095&#13;" line297="        }&#13;" line298="        if (index &gt; 4 || index &lt;= 0)&#13;" line299="            return&#13;" line300="        let pn = (4 - index) * 2&#13;" line301="        let pp = (4 - index) * 2 + 1&#13;" line302="        if (speed &gt;= 0) {&#13;" line303="            setPwm(pp, 0, speed)&#13;" line304="            setPwm(pn, 0, 0)&#13;" line305="        } else {&#13;" line306="            setPwm(pp, 0, 0)&#13;" line307="            setPwm(pn, 0, -speed)&#13;" line308="        }&#13;" line309="    }&#13;" line310="&#13;" line311="    /**&#13;" line312="     * mecanum mode controll&#13;" line313="     * M1~M4.&#13;" line314="     * speed(0~255).&#13;" line315="    */&#13;" line316="    //% weight=0&#13;" line317="    //% blockId=motor_MecanumRun block=&quot;|메카넘|%Mecanum|방향|%speed|속도로 이동&quot;&#13;" line318="    //% speed.min=0 speed.max=255&#13;" line319="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=3&#13;" line320="    //% group=&quot;모터 제어(기초)&quot;&#13;" line321="    export function MecanumRun(direction: Mecanum, speed: number): void {&#13;" line322="        if (!initialized) {&#13;" line323="            initPCA9685()&#13;" line324="        }&#13;" line325="&#13;" line326="        speed = speed * 16; // map 255 to 4096&#13;" line327="&#13;" line328="        if (speed &gt;= 4096) {&#13;" line329="            speed = 4095&#13;" line330="        }&#13;" line331="        if (speed &lt;= -4096) {&#13;" line332="            speed = -4095&#13;" line333="        }&#13;" line334="        // motor controll&#13;" line335="        // 1  2  3  |  ↖  ↑  ↗&#13;" line336="        // 4  5  6  |  ←   s  →&#13;" line337="        // 7  8  9  |  ↙  ↓  ↘&#13;" line338="        if (direction == 1) {&#13;" line339="            // M1 foward&#13;" line340="            setPwm(7, 0, speed);&#13;" line341="            setPwm(6, 0, 0);&#13;" line342="&#13;" line343="            // M2 stop&#13;" line344="            setPwm(5, 0, 0);&#13;" line345="            setPwm(4, 0, 0);&#13;" line346="&#13;" line347="            // M3 foward&#13;" line348="            setPwm(3, 0, 0);&#13;" line349="            setPwm(2, 0, speed);&#13;" line350="&#13;" line351="            // M4 stop&#13;" line352="            setPwm(1, 0, 0);&#13;" line353="            setPwm(0, 0, 0);&#13;" line354="        }&#13;" line355="&#13;" line356="        if (direction == 2) {&#13;" line357="            // M1 foward&#13;" line358="            setPwm(7, 0, speed);&#13;" line359="            setPwm(6, 0, 0);&#13;" line360="&#13;" line361="            // M2 foward&#13;" line362="            setPwm(5, 0, speed);&#13;" line363="            setPwm(4, 0, 0);&#13;" line364="&#13;" line365="            // M3 foward&#13;" line366="            setPwm(3, 0, 0);&#13;" line367="            setPwm(2, 0, speed);&#13;" line368="&#13;" line369="            // M4 foward&#13;" line370="            setPwm(1, 0, 0);&#13;" line371="            setPwm(0, 0, speed);&#13;" line372="        }&#13;" line373="&#13;" line374="        if (direction == 3) {&#13;" line375="            // M1 stop&#13;" line376="            setPwm(7, 0, 0);&#13;" line377="            setPwm(6, 0, 0);&#13;" line378="&#13;" line379="            // M2 foward&#13;" line380="            setPwm(5, 0, speed);&#13;" line381="            setPwm(4, 0, 0);&#13;" line382="&#13;" line383="            // M3 stop&#13;" line384="            setPwm(3, 0, 0);&#13;" line385="            setPwm(2, 0, 0);&#13;" line386="&#13;" line387="            // M4 foward&#13;" line388="            setPwm(1, 0, 0);&#13;" line389="            setPwm(0, 0, speed);&#13;" line390="        }&#13;" line391="&#13;" line392="        if (direction == 4) {&#13;" line393="            // M1 foward&#13;" line394="            setPwm(7, 0, speed);&#13;" line395="            setPwm(6, 0, 0);&#13;" line396="&#13;" line397="            // M2 backward&#13;" line398="            setPwm(5, 0, 0);&#13;" line399="            setPwm(4, 0, speed);&#13;" line400="&#13;" line401="            // M3 foward&#13;" line402="            setPwm(3, 0, 0);&#13;" line403="            setPwm(2, 0, speed);&#13;" line404="&#13;" line405="            // M4 backward&#13;" line406="            setPwm(1, 0, speed);&#13;" line407="            setPwm(0, 0, 0);&#13;" line408="        }&#13;" line409="&#13;" line410="        if (direction == 5) {&#13;" line411="            // M1 stop&#13;" line412="            setPwm(7, 0, 0);&#13;" line413="            setPwm(6, 0, 0);&#13;" line414="&#13;" line415="            // M2 stop&#13;" line416="            setPwm(5, 0, 0);&#13;" line417="            setPwm(4, 0, 0);&#13;" line418="&#13;" line419="            // M3 stop&#13;" line420="            setPwm(3, 0, 0);&#13;" line421="            setPwm(2, 0, 0);&#13;" line422="&#13;" line423="            // M4 stop&#13;" line424="            setPwm(1, 0, 0);&#13;" line425="            setPwm(0, 0, 0);&#13;" line426="        }&#13;" line427="&#13;" line428="        if (direction == 6) {&#13;" line429="            // M1 backward&#13;" line430="            setPwm(7, 0, 0);&#13;" line431="            setPwm(6, 0, speed);&#13;" line432="&#13;" line433="            // M2 foward&#13;" line434="            setPwm(5, 0, speed);&#13;" line435="            setPwm(4, 0, 0);&#13;" line436="&#13;" line437="            // M3 backward&#13;" line438="            setPwm(3, 0, speed);&#13;" line439="            setPwm(2, 0, 0);&#13;" line440="&#13;" line441="            // M4 foward&#13;" line442="            setPwm(1, 0, 0);&#13;" line443="            setPwm(0, 0, speed);&#13;" line444="        }&#13;" line445="&#13;" line446="        if (direction == 7) {&#13;" line447="            // M1 stop&#13;" line448="            setPwm(7, 0, 0);&#13;" line449="            setPwm(6, 0, 0);&#13;" line450="&#13;" line451="            // M2 backward&#13;" line452="            setPwm(5, 0, 0);&#13;" line453="            setPwm(4, 0, speed);&#13;" line454="&#13;" line455="            // M3 stop&#13;" line456="            setPwm(3, 0, 0);&#13;" line457="            setPwm(2, 0, 0);&#13;" line458="&#13;" line459="            // M4 backward&#13;" line460="            setPwm(1, 0, speed);&#13;" line461="            setPwm(0, 0, 0);&#13;" line462="        }&#13;" line463="&#13;" line464="        if (direction == 8) {&#13;" line465="            // M1 backward&#13;" line466="            setPwm(7, 0, 0);&#13;" line467="            setPwm(6, 0, speed);&#13;" line468="&#13;" line469="            // M2 backward&#13;" line470="            setPwm(5, 0, 0);&#13;" line471="            setPwm(4, 0, speed);&#13;" line472="&#13;" line473="            // M3 backward&#13;" line474="            setPwm(3, 0, speed);&#13;" line475="            setPwm(2, 0, 0);&#13;" line476="&#13;" line477="            // M4 backward&#13;" line478="            setPwm(1, 0, speed);&#13;" line479="            setPwm(0, 0, 0);&#13;" line480="        }&#13;" line481="&#13;" line482="        if (direction == 9) {&#13;" line483="            // M1 backward&#13;" line484="            setPwm(7, 0, 0);&#13;" line485="            setPwm(6, 0, speed);&#13;" line486="&#13;" line487="            // M2 stop&#13;" line488="            setPwm(5, 0, 0);&#13;" line489="            setPwm(4, 0, 0);&#13;" line490="&#13;" line491="            // M3 backward&#13;" line492="            setPwm(3, 0, speed);&#13;" line493="            setPwm(2, 0, 0);&#13;" line494="&#13;" line495="            // M4 stop&#13;" line496="            setPwm(1, 0, 0);&#13;" line497="            setPwm(0, 0, 0);&#13;" line498="        }&#13;" line499="    }&#13;" line500="&#13;" line501="    /**&#13;" line502="     * Stop the dc motor.&#13;" line503="    */&#13;" line504="    //% weight=0&#13;" line505="    //% blockId=motor_motorStop block=&quot;|%index|모터 정지&quot;&#13;" line506="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2 &#13;" line507="    //% group=&quot;모터 제어(심화)&quot;&#13;" line508="    export function motorStop(index: Motors) {&#13;" line509="        setPwm((4 - index) * 2, 0, 0);&#13;" line510="        setPwm((4 - index) * 2 + 1, 0, 0);&#13;" line511="    }&#13;" line512="&#13;" line513="    /**&#13;" line514="     * Stop all motors&#13;" line515="    */&#13;" line516="    //% weight=20&#13;" line517="    //% blockId=motor_motorStopAll block=&quot;|모든 모터 정지&quot;&#13;" line518="    //% group=&quot;모터 제어(기초)&quot;&#13;" line519="    export function motorStopAll(): void {&#13;" line520="        for (let idx = 1; idx &lt;= 4; idx++) {&#13;" line521="            motorStop(idx);&#13;" line522="        }&#13;" line523="    }&#13;" line524="&#13;" line525="    /**&#13;" line526="        * noraml mode controll&#13;" line527="        * M1~M4.&#13;" line528="        * speed(0~255).&#13;" line529="       */&#13;" line530="    //% weight=0&#13;" line531="    //% blockId=motor_NormalRun block=&quot;|포니봇|%Mecanum|방향|%speed|속도로 이동&quot;&#13;" line532="    //% speed.min=0 speed.max=255&#13;" line533="    //% DirControll.fieldEditor=&quot;gridpicker&quot; DirControll.fieldOptions.columns=2&#13;" line534="    //% group=&quot;모터 제어(기초)&quot;&#13;" line535="    export function NomalRun(direction: DirControll, speed: number): void {&#13;" line536="        if (!initialized) {&#13;" line537="            initPCA9685()&#13;" line538="        }&#13;" line539="&#13;" line540="        speed = speed * 16; // map 255 to 4096&#13;" line541="&#13;" line542="        if (speed &gt;= 4096) {&#13;" line543="            speed = 4095&#13;" line544="        }&#13;" line545="        if (speed &lt;= -4096) {&#13;" line546="            speed = -4095&#13;" line547="        }&#13;" line548="&#13;" line549="        if (direction == 1) {&#13;" line550="            // M1 foward&#13;" line551="            setPwm(7, 0, speed);&#13;" line552="            setPwm(6, 0, 0);&#13;" line553="&#13;" line554="            // M2 foward&#13;" line555="            setPwm(5, 0, speed);&#13;" line556="            setPwm(4, 0, 0);&#13;" line557="&#13;" line558="            // M3 foward&#13;" line559="            setPwm(3, 0, 0);&#13;" line560="            setPwm(2, 0, speed);&#13;" line561="&#13;" line562="            // M4 foward&#13;" line563="            setPwm(1, 0, 0);&#13;" line564="            setPwm(0, 0, speed);&#13;" line565="        }&#13;" line566="&#13;" line567="&#13;" line568="        if (direction == 2) {&#13;" line569="            // M1 backward&#13;" line570="            setPwm(7, 0, 0);&#13;" line571="            setPwm(6, 0, speed);&#13;" line572="&#13;" line573="            // M2 backward&#13;" line574="            setPwm(5, 0, 0);&#13;" line575="            setPwm(4, 0, speed);&#13;" line576="&#13;" line577="            // M3 backward&#13;" line578="            setPwm(3, 0, speed);&#13;" line579="            setPwm(2, 0, 0);&#13;" line580="&#13;" line581="            // M4 backward&#13;" line582="            setPwm(1, 0, speed);&#13;" line583="            setPwm(0, 0, 0);&#13;" line584="        }&#13;" line585="&#13;" line586="        if (direction == 3) {&#13;" line587="            // M1 foward&#13;" line588="            setPwm(7, 0, speed);&#13;" line589="            setPwm(6, 0, 0);&#13;" line590="&#13;" line591="            // M2 foward&#13;" line592="            setPwm(5, 0, speed);&#13;" line593="            setPwm(4, 0, 0);&#13;" line594="&#13;" line595="            // M3 backward&#13;" line596="            setPwm(3, 0, speed);&#13;" line597="            setPwm(2, 0, 0);&#13;" line598="&#13;" line599="            // M4 backward&#13;" line600="            setPwm(1, 0, speed);&#13;" line601="            setPwm(0, 0, 0);&#13;" line602="        }&#13;" line603="&#13;" line604="        if (direction == 4) {&#13;" line605="            // M1 backward&#13;" line606="            setPwm(7, 0, 0);&#13;" line607="            setPwm(6, 0, speed);&#13;" line608="&#13;" line609="            // M2 backward&#13;" line610="            setPwm(5, 0, 0);&#13;" line611="            setPwm(4, 0, speed);&#13;" line612="&#13;" line613="            // M3 backward&#13;" line614="            setPwm(3, 0, 0);&#13;" line615="            setPwm(2, 0, speed);&#13;" line616="&#13;" line617="            // M4 backward&#13;" line618="            setPwm(1, 0, 0);&#13;" line619="            setPwm(0, 0, speed);&#13;" line620="        }&#13;" line621="    }&#13;" line622="&#13;" line623="    /**&#13;" line624="    * ---------------line sensor-------------------&#13;" line625="    */&#13;" line626="    export enum twoLineState {&#13;" line627="        //% block=&quot;◌ ◌ &quot; &#13;" line628="        two_line_State_0 = 0,&#13;" line629="        //% block=&quot;● ●&quot; &#13;" line630="        two_line_State_1 = 1,&#13;" line631="        //% block=&quot;● ◌&quot; &#13;" line632="        two_line_State_2 = 2,&#13;" line633="        //% block=&quot;◌ ●&quot; &#13;" line634="        two_line_State_3 = 3,&#13;" line635="    }&#13;" line636="&#13;" line637="    export enum lineState {&#13;" line638="        //% block=&quot;◌&quot; &#13;" line639="        line_State_0 = 0,&#13;" line640="        //% block=&quot;●&quot; &#13;" line641="        line_State_1 = 1&#13;" line642="    }&#13;" line643="&#13;" line644="    export enum lineSensorChannel {&#13;" line645="        //% block=&quot;왼쪽&quot;&#13;" line646="        reft = 1,&#13;" line647="        //% block=&quot;오른쪽&quot;&#13;" line648="        right = 2,&#13;" line649="    }&#13;" line650="&#13;" line651="    //% blockId=&quot;check_two_line_state&quot;&#13;" line652="    //% block=&quot;두 라인 센서의 값이 %state&quot;&#13;" line653="    //% state.shadow=&quot;dropdown&quot;&#13;" line654="    //% group=&quot;라인 감지 센서&quot;&#13;" line655="    //% weight=0&#13;" line656="    export function checkTwoLineState(state: twoLineState): boolean {&#13;" line657="        const leftSensor = pins.digitalReadPin(DigitalPin.P16);&#13;" line658="        const rightSensor = pins.digitalReadPin(DigitalPin.P15);&#13;" line659="&#13;" line660="        switch (state) {&#13;" line661="            case twoLineState.two_line_State_0:&#13;" line662="                return leftSensor === 0 &amp;&amp; rightSensor === 0;&#13;" line663="            case twoLineState.two_line_State_1:&#13;" line664="                return leftSensor === 1 &amp;&amp; rightSensor === 1;&#13;" line665="            case twoLineState.two_line_State_2:&#13;" line666="                return leftSensor === 1 &amp;&amp; rightSensor === 0;&#13;" line667="            case twoLineState.two_line_State_3:&#13;" line668="                return leftSensor === 0 &amp;&amp; rightSensor === 1;&#13;" line669="            default:&#13;" line670="                return false;&#13;" line671="        }&#13;" line672="    }&#13;" line673="&#13;" line674="    //% blockId=&quot;check_single_line_sensor&quot;&#13;" line675="    //% block=&quot;%channel 라인 센서의 값이 %state&quot;&#13;" line676="    //% channel.shadow=&quot;dropdown&quot;&#13;" line677="    //% state.shadow=&quot;dropdown&quot;&#13;" line678="    //% group=&quot;라인 감지 센서&quot;&#13;" line679="    //% weight=0&#13;" line680="    export function checkSingleLineSensor(channel: lineSensorChannel, state: lineState): boolean {&#13;" line681="        const sensorValue = channel === lineSensorChannel.reft&#13;" line682="            ? pins.digitalReadPin(DigitalPin.P16)&#13;" line683="            : pins.digitalReadPin(DigitalPin.P15);&#13;" line684="&#13;" line685="        return sensorValue === state;&#13;" line686="    }&#13;" line687="&#13;" line688="    //% blockId=&quot;read_line_sensor&quot;&#13;" line689="    //% block=&quot;%channel 라인 센서 값 읽기&quot;&#13;" line690="    //% channel.shadow=&quot;dropdown&quot;&#13;" line691="    //% group=&quot;라인 감지 센서&quot;&#13;" line692="    //% weight=0&#13;" line693="    export function readLineSensor(channel: lineSensorChannel): number {&#13;" line694="        return channel === lineSensorChannel.reft&#13;" line695="            ? pins.digitalReadPin(DigitalPin.P16)&#13;" line696="            : pins.digitalReadPin(DigitalPin.P15);&#13;" line697="    }&#13;" line698="&#13;" line699="    /**&#13;" line700="    * ---------------sonar sensor-------------------&#13;" line701="    */&#13;" line702="    export enum PingUnit {&#13;" line703="        //% block=&quot;마이크로초&quot;&#13;" line704="        MicroSeconds,&#13;" line705="        //% block=&quot;센티미터&quot;&#13;" line706="        Centimeters,&#13;" line707="        //% block=&quot;인치&quot;&#13;" line708="        Inches&#13;" line709="    }&#13;" line710="&#13;" line711="    //% blockId=sonar_ping &#13;" line712="    //% block=&quot;%unit 단위로 측정한 거리&quot;&#13;" line713="    //% unit.shadow=&quot;dropdown&quot;&#13;" line714="    //% group=&quot;거리 감지 센서&quot;&#13;" line715="    //% weight=0&#13;" line716="    export function ping(unit: PingUnit, maxCmDistance = 500): number {&#13;" line717="        const trig = DigitalPin.P13; // Trig 핀 기본값&#13;" line718="        const echo = DigitalPin.P14; // Echo 핀 기본값&#13;" line719="        // send pulse&#13;" line720="        pins.setPull(trig, PinPullMode.PullNone);&#13;" line721="        pins.digitalWritePin(trig, 0);&#13;" line722="        control.waitMicros(2);&#13;" line723="        pins.digitalWritePin(trig, 1);&#13;" line724="        control.waitMicros(10);&#13;" line725="        pins.digitalWritePin(trig, 0);&#13;" line726="&#13;" line727="        // read pulse&#13;" line728="        const d = pins.pulseIn(echo, PulseValue.High, maxCmDistance * 58);&#13;" line729="&#13;" line730="        switch (unit) {&#13;" line731="            case PingUnit.Centimeters: return Math.idiv(d, 58);&#13;" line732="            case PingUnit.Inches: return Math.idiv(d, 148);&#13;" line733="            default: return d;&#13;" line734="        }&#13;" line735="    }&#13;" line736="&#13;" line737="    /**&#13;" line738="    * ---------------color sensor-------------------&#13;" line739="    */&#13;" line740="    export enum DetectedColor {&#13;" line741="        //% block=&quot;빨간색&quot;&#13;" line742="        Red,&#13;" line743="        //% block=&quot;초록색&quot;&#13;" line744="        Green,&#13;" line745="        //% block=&quot;파란색&quot;&#13;" line746="        Blue,&#13;" line747="        //% block=&quot;흰색&quot;&#13;" line748="        White,&#13;" line749="        //% block=&quot;검은색&quot;&#13;" line750="        Black,&#13;" line751="    }&#13;" line752="&#13;" line753="    class tcs3472 {&#13;" line754="        is_setup: boolean&#13;" line755="        addr: number&#13;" line756="        leds: DigitalPin&#13;" line757="&#13;" line758="        constructor(addr: number) {&#13;" line759="            this.is_setup = false&#13;" line760="            this.addr = addr&#13;" line761="        }&#13;" line762="&#13;" line763="        setup(): void {&#13;" line764="            if (this.is_setup) return&#13;" line765="            this.is_setup = true&#13;" line766="            smbus.writeByte(this.addr, 0x80, 0x03)&#13;" line767="            smbus.writeByte(this.addr, 0x81, 0x2b)&#13;" line768="        }&#13;" line769="&#13;" line770="        setIntegrationTime(time: number): void {&#13;" line771="            this.setup()&#13;" line772="            time = Math.clamp(0, 255, time * 10 / 24)&#13;" line773="            smbus.writeByte(this.addr, 0x81, 255 - time)&#13;" line774="        }&#13;" line775="&#13;" line776="        light(): number {&#13;" line777="            return this.raw()[0]&#13;" line778="        }&#13;" line779="&#13;" line780="        rgb(): number[] {&#13;" line781="            let result: number[] = this.raw()&#13;" line782="            let clear: number = result.shift()&#13;" line783="            for (let x: number = 0; x &lt; result.length; x++) {&#13;" line784="                result[x] = result[x] * 255 / clear&#13;" line785="            }&#13;" line786="            return result&#13;" line787="        }&#13;" line788="&#13;" line789="        raw(): number[] {&#13;" line790="            this.setup()&#13;" line791="            let result2: Buffer = smbus.readBuffer(this.addr, 0xb4, pins.sizeOf(NumberFormat.UInt16LE) * 4)&#13;" line792="            return smbus.unpack(&quot;HHHH&quot;, result2)&#13;" line793="        }&#13;" line794="    }&#13;" line795="&#13;" line796="    let _tcs3472: tcs3472 = new tcs3472(0x29)&#13;" line797="&#13;" line798="    /**&#13;" line799="     * 밝기 레벨 센싱&#13;" line800="     */&#13;" line801="    //% blockId=brickcell_color_tcs34725_get_light&#13;" line802="    //% block=&quot;밝기(B) 값 읽기&quot;&#13;" line803="    //% group=&quot;색상 감지 센서&quot;&#13;" line804="    export function getLight(): number {&#13;" line805="        return Math.round(_tcs3472.light())&#13;" line806="    }&#13;" line807="&#13;" line808="    /**&#13;" line809="     * R 데이터 센싱&#13;" line810="     */&#13;" line811="    //% blockId=brickcell_color_tcs34725__get_red&#13;" line812="    //% block=&quot;빨간색(R) 색상 값 측정&quot;&#13;" line813="    //% group=&quot;색상 감지 센서&quot;&#13;" line814="    export function getRed(): number {&#13;" line815="        return Math.round(_tcs3472.rgb()[0]);&#13;" line816="    }&#13;" line817="&#13;" line818="    /**&#13;" line819="     * G 데이터 센싱&#13;" line820="     */&#13;" line821="    //% blockId=brickcell_color_tcs34725_get_green&#13;" line822="    //% block=&quot;초록색(G) 색상 값 측정&quot;&#13;" line823="    //% group=&quot;색상 감지 센서&quot;&#13;" line824="    export function getGreen(): number {&#13;" line825="        return Math.round(_tcs3472.rgb()[1]);&#13;" line826="    }&#13;" line827="&#13;" line828="    /**&#13;" line829="     * B 데이터 센싱&#13;" line830="     */&#13;" line831="    //% blockId=brickcell_color_tcs34725_get_blue&#13;" line832="    //% block=&quot;파란색(B) 색상 값 측정&quot;&#13;" line833="    //% group=&quot;색상 감지 센서&quot;&#13;" line834="    export function getBlue(): number {&#13;" line835="        return Math.round(_tcs3472.rgb()[2]);&#13;" line836="    }&#13;" line837="&#13;" line838="    /**&#13;" line839="     * Set the integration time of the colour sensor in ms&#13;" line840="     */&#13;" line841="    //% blockId=brickcell_color_tcs34725_set_integration_time&#13;" line842="    //% block=&quot;색상 통합 시간을 %time ms로 설정&quot;&#13;" line843="    //% time.min=0 time.max=612 value.defl=500&#13;" line844="    //% group=&quot;색상 감지 센서&quot;&#13;" line845="    export function setColourIntegrationTime(time: number): void {&#13;" line846="        return _tcs3472.setIntegrationTime(time)&#13;" line847="    }&#13;" line848="&#13;" line849="    /**&#13;" line850="     * 감지된 색상이 지정된 색상인지 확인&#13;" line851="     */&#13;" line852="    //% blockId=color_sensor_is_color&#13;" line853="    //% block=&quot;감지된 색상이 %color&quot;&#13;" line854="    //% group=&quot;색상 감지 센서&quot;&#13;" line855="    export function isColor(color: DetectedColor): boolean {&#13;" line856="        const rgb = _tcs3472.rgb();&#13;" line857="        const r = rgb[0];&#13;" line858="        const g = rgb[1];&#13;" line859="        const b = rgb[2];&#13;" line860="&#13;" line861="        const total = r + g + b;&#13;" line862="        if (total === 0) return false;&#13;" line863="&#13;" line864="        const normR = r / total;&#13;" line865="        const normG = g / total;&#13;" line866="        const normB = b / total;&#13;" line867="&#13;" line868="        switch (color) {&#13;" line869="            case DetectedColor.Red:&#13;" line870="                return normR &gt; 0.5 &amp;&amp; normG &lt; 0.3 &amp;&amp; normB &lt; 0.3;&#13;" line871="            case DetectedColor.Green:&#13;" line872="                return normG &gt; 0.5 &amp;&amp; normR &lt; 0.3 &amp;&amp; normB &lt; 0.3;&#13;" line873="            case DetectedColor.Blue:&#13;" line874="                return normB &gt; 0.5 &amp;&amp; normR &lt; 0.3 &amp;&amp; normG &lt; 0.3;&#13;" line875="            case DetectedColor.White:&#13;" line876="                return r &gt; 200 &amp;&amp; g &gt; 200 &amp;&amp; b &gt; 200;&#13;" line877="            case DetectedColor.Black:&#13;" line878="                return r &lt; 50 &amp;&amp; g &lt; 50 &amp;&amp; b &lt; 50;&#13;" line879="            default:&#13;" line880="                return false;&#13;" line881="        }&#13;" line882="    }&#13;" line883="&#13;" line884="    /**&#13;" line885="    * ---------------oled display-------------------&#13;" line886="    */&#13;" line887="    let font: Buffer;&#13;" line888="&#13;" line889="    const SSD1306_SETCONTRAST = 0x81&#13;" line890="    const SSD1306_SETCOLUMNADRESS = 0x21&#13;" line891="    const SSD1306_SETPAGEADRESS = 0x22&#13;" line892="    const SSD1306_DISPLAYALLON_RESUME = 0xA4&#13;" line893="    const SSD1306_DISPLAYALLON = 0xA5&#13;" line894="    const SSD1306_NORMALDISPLAY = 0xA6&#13;" line895="    const SSD1306_INVERTDISPLAY = 0xA7&#13;" line896="    const SSD1306_DISPLAYOFF = 0xAE&#13;" line897="    const SSD1306_DISPLAYON = 0xAF&#13;" line898="    const SSD1306_SETDISPLAYOFFSET = 0xD3&#13;" line899="    const SSD1306_SETCOMPINS = 0xDA&#13;" line900="    const SSD1306_SETVCOMDETECT = 0xDB&#13;" line901="    const SSD1306_SETDISPLAYCLOCKDIV = 0xD5&#13;" line902="    const SSD1306_SETPRECHARGE = 0xD9&#13;" line903="    const SSD1306_SETMULTIPLEX = 0xA8&#13;" line904="    const SSD1306_SETLOWCOLUMN = 0x00&#13;" line905="    const SSD1306_SETHIGHCOLUMN = 0x10&#13;" line906="    const SSD1306_SETSTARTLINE = 0x40&#13;" line907="    const SSD1306_MEMORYMODE = 0x20&#13;" line908="    const SSD1306_COMSCANINC = 0xC0&#13;" line909="    const SSD1306_COMSCANDEC = 0xC8&#13;" line910="    const SSD1306_SEGREMAP = 0xA0&#13;" line911="    const SSD1306_CHARGEPUMP = 0x8D&#13;" line912="    const chipAdress = 0x3C&#13;" line913="    const xOffset = 0&#13;" line914="    const yOffset = 0&#13;" line915="    let charX = 0&#13;" line916="    let charY = 0&#13;" line917="    let displayWidth = 128&#13;" line918="    let displayHeight = 64 / 8&#13;" line919="    let screenSize = 0&#13;" line920="    //let font: Array&lt;Array&lt;number&gt;&gt;&#13;" line921="    let loadStarted: boolean;&#13;" line922="    let loadPercent: number;&#13;" line923="    function command(cmd: number) {&#13;" line924="        let buf4 = pins.createBuffer(2)&#13;" line925="        buf4[0] = 0x00&#13;" line926="        buf4[1] = cmd&#13;" line927="        pins.i2cWriteBuffer(chipAdress, buf4, false)&#13;" line928="    }&#13;" line929="&#13;" line930="    //% group=&quot;디스플레이 설정&quot;&#13;" line931="    //% block=&quot;디스플레이 사용 시작&quot;&#13;" line932="    //% width.defl=128&#13;" line933="    //% height.defl=64&#13;" line934="    export function init() {&#13;" line935="        command(SSD1306_DISPLAYOFF);&#13;" line936="        command(SSD1306_SETDISPLAYCLOCKDIV);&#13;" line937="        command(0x80);                                  // the suggested ratio 0x80&#13;" line938="        command(SSD1306_SETMULTIPLEX);&#13;" line939="        command(0x3F);&#13;" line940="        command(SSD1306_SETDISPLAYOFFSET);&#13;" line941="        command(0x0);                                   // no offset&#13;" line942="        command(SSD1306_SETSTARTLINE | 0x0);            // line #0&#13;" line943="        command(SSD1306_CHARGEPUMP);&#13;" line944="        command(0x14);&#13;" line945="        command(SSD1306_MEMORYMODE);&#13;" line946="        command(0x00);                                  // 0x0 act like ks0108&#13;" line947="        command(SSD1306_SEGREMAP | 0x1);&#13;" line948="        command(SSD1306_COMSCANDEC);&#13;" line949="        command(SSD1306_SETCOMPINS);&#13;" line950="        command(0x12);&#13;" line951="        command(SSD1306_SETCONTRAST);&#13;" line952="        command(0xCF);&#13;" line953="        command(SSD1306_SETPRECHARGE);&#13;" line954="        command(0xF1);&#13;" line955="        command(SSD1306_SETVCOMDETECT);&#13;" line956="        command(0x40);&#13;" line957="        command(SSD1306_DISPLAYALLON_RESUME);&#13;" line958="        command(SSD1306_NORMALDISPLAY);&#13;" line959="        command(SSD1306_DISPLAYON);&#13;" line960="        displayWidth = 128&#13;" line961="        displayHeight = 64 / 8&#13;" line962="        screenSize = displayWidth * displayHeight&#13;" line963="        charX = xOffset&#13;" line964="        charY = yOffset&#13;" line965="        font = hex`&#13;" line966="    0000000000&#13;" line967="    3E5B4F5B3E&#13;" line968="    3E6B4F6B3E&#13;" line969="    1C3E7C3E1C&#13;" line970="    183C7E3C18&#13;" line971="    1C577D571C&#13;" line972="    1C5E7F5E1C&#13;" line973="    00183C1800&#13;" line974="    FFE7C3E7FF&#13;" line975="    0018241800&#13;" line976="    FFE7DBE7FF&#13;" line977="    30483A060E&#13;" line978="    2629792926&#13;" line979="    407F050507&#13;" line980="    407F05253F&#13;" line981="    5A3CE73C5A&#13;" line982="    7F3E1C1C08&#13;" line983="    081C1C3E7F&#13;" line984="    14227F2214&#13;" line985="    5F5F005F5F&#13;" line986="    06097F017F&#13;" line987="    006689956A&#13;" line988="    6060606060&#13;" line989="    94A2FFA294&#13;" line990="    08047E0408&#13;" line991="    10207E2010&#13;" line992="    08082A1C08&#13;" line993="    081C2A0808&#13;" line994="    1E10101010&#13;" line995="    0C1E0C1E0C&#13;" line996="    30383E3830&#13;" line997="    060E3E0E06&#13;" line998="    0000000000&#13;" line999="    00005F0000&#13;" line1000="    0007000700&#13;" line1001="    147F147F14&#13;" line1002="    242A7F2A12&#13;" line1003="    2313086462&#13;" line1004="    3649562050&#13;" line1005="    0008070300&#13;" line1006="    001C224100&#13;" line1007="    0041221C00&#13;" line1008="    2A1C7F1C2A&#13;" line1009="    08083E0808&#13;" line1010="    0080703000&#13;" line1011="    0808080808&#13;" line1012="    0000606000&#13;" line1013="    2010080402&#13;" line1014="    3E5149453E&#13;" line1015="    00427F4000&#13;" line1016="    7249494946&#13;" line1017="    2141494D33&#13;" line1018="    1814127F10&#13;" line1019="    2745454539&#13;" line1020="    3C4A494931&#13;" line1021="    4121110907&#13;" line1022="    3649494936&#13;" line1023="    464949291E&#13;" line1024="    0000140000&#13;" line1025="    0040340000&#13;" line1026="    0008142241&#13;" line1027="    1414141414&#13;" line1028="    0041221408&#13;" line1029="    0201590906&#13;" line1030="    3E415D594E&#13;" line1031="    7C1211127C&#13;" line1032="    7F49494936&#13;" line1033="    3E41414122&#13;" line1034="    7F4141413E&#13;" line1035="    7F49494941&#13;" line1036="    7F09090901&#13;" line1037="    3E41415173&#13;" line1038="    7F0808087F&#13;" line1039="    00417F4100&#13;" line1040="    2040413F01&#13;" line1041="    7F08142241&#13;" line1042="    7F40404040&#13;" line1043="    7F021C027F&#13;" line1044="    7F0408107F&#13;" line1045="    3E4141413E&#13;" line1046="    7F09090906&#13;" line1047="    3E4151215E&#13;" line1048="    7F09192946&#13;" line1049="    2649494932&#13;" line1050="    03017F0103&#13;" line1051="    3F4040403F&#13;" line1052="    1F2040201F&#13;" line1053="    3F4038403F&#13;" line1054="    6314081463&#13;" line1055="    0304780403&#13;" line1056="    6159494D43&#13;" line1057="    007F414141&#13;" line1058="    0204081020&#13;" line1059="    004141417F&#13;" line1060="    0402010204&#13;" line1061="    4040404040&#13;" line1062="    0003070800&#13;" line1063="    2054547840&#13;" line1064="    7F28444438&#13;" line1065="    3844444428&#13;" line1066="    384444287F&#13;" line1067="    3854545418&#13;" line1068="    00087E0902&#13;" line1069="    18A4A49C78&#13;" line1070="    7F08040478&#13;" line1071="    00447D4000&#13;" line1072="    2040403D00&#13;" line1073="    7F10284400&#13;" line1074="    00417F4000&#13;" line1075="    7C04780478&#13;" line1076="    7C08040478&#13;" line1077="    3844444438&#13;" line1078="    FC18242418&#13;" line1079="    18242418FC&#13;" line1080="    7C08040408&#13;" line1081="    4854545424&#13;" line1082="    04043F4424&#13;" line1083="    3C4040207C&#13;" line1084="    1C2040201C&#13;" line1085="    3C4030403C&#13;" line1086="    4428102844&#13;" line1087="    4C9090907C&#13;" line1088="    4464544C44&#13;" line1089="    0008364100&#13;" line1090="    0000770000&#13;" line1091="    0041360800&#13;" line1092="    0201020402&#13;" line1093="    3C2623263C&#13;" line1094="    1EA1A16112&#13;" line1095="    3A4040207A&#13;" line1096="    3854545559&#13;" line1097="    2155557941&#13;" line1098="    2154547841&#13;" line1099="    2155547840&#13;" line1100="    2054557940&#13;" line1101="    0C1E527212&#13;" line1102="    3955555559&#13;" line1103="    3954545459&#13;" line1104="    3955545458&#13;" line1105="    0000457C41&#13;" line1106="    0002457D42&#13;" line1107="    0001457C40&#13;" line1108="    F0292429F0&#13;" line1109="    F0282528F0&#13;" line1110="    7C54554500&#13;" line1111="    2054547C54&#13;" line1112="    7C0A097F49&#13;" line1113="    3249494932&#13;" line1114="    3248484832&#13;" line1115="    324A484830&#13;" line1116="    3A4141217A&#13;" line1117="    3A42402078&#13;" line1118="    009DA0A07D&#13;" line1119="    3944444439&#13;" line1120="    3D4040403D&#13;" line1121="    3C24FF2424&#13;" line1122="    487E494366&#13;" line1123="    2B2FFC2F2B&#13;" line1124="    FF0929F620&#13;" line1125="    C0887E0903&#13;" line1126="    2054547941&#13;" line1127="    0000447D41&#13;" line1128="    3048484A32&#13;" line1129="    384040227A&#13;" line1130="    007A0A0A72&#13;" line1131="    7D0D19317D&#13;" line1132="    2629292F28&#13;" line1133="    2629292926&#13;" line1134="    30484D4020&#13;" line1135="    3808080808&#13;" line1136="    0808080838&#13;" line1137="    2F10C8ACBA&#13;" line1138="    2F102834FA&#13;" line1139="    00007B0000&#13;" line1140="    08142A1422&#13;" line1141="    22142A1408&#13;" line1142="    AA005500AA&#13;" line1143="    AA55AA55AA&#13;" line1144="    000000FF00&#13;" line1145="    101010FF00&#13;" line1146="    141414FF00&#13;" line1147="    1010FF00FF&#13;" line1148="    1010F010F0&#13;" line1149="    141414FC00&#13;" line1150="    1414F700FF&#13;" line1151="    0000FF00FF&#13;" line1152="    1414F404FC&#13;" line1153="    141417101F&#13;" line1154="    10101F101F&#13;" line1155="    1414141F00&#13;" line1156="    101010F000&#13;" line1157="    0000001F10&#13;" line1158="    1010101F10&#13;" line1159="    101010F010&#13;" line1160="    000000FF10&#13;" line1161="    1010101010&#13;" line1162="    101010FF10&#13;" line1163="    000000FF14&#13;" line1164="    0000FF00FF&#13;" line1165="    00001F1017&#13;" line1166="    0000FC04F4&#13;" line1167="    1414171017&#13;" line1168="    1414F404F4&#13;" line1169="    0000FF00F7&#13;" line1170="    1414141414&#13;" line1171="    1414F700F7&#13;" line1172="    1414141714&#13;" line1173="    10101F101F&#13;" line1174="    141414F414&#13;" line1175="    1010F010F0&#13;" line1176="    00001F101F&#13;" line1177="    0000001F14&#13;" line1178="    000000FC14&#13;" line1179="    0000F010F0&#13;" line1180="    1010FF10FF&#13;" line1181="    141414FF14&#13;" line1182="    1010101F00&#13;" line1183="    000000F010&#13;" line1184="    FFFFFFFFFF&#13;" line1185="    F0F0F0F0F0&#13;" line1186="    FFFFFF0000&#13;" line1187="    000000FFFF&#13;" line1188="    0F0F0F0F0F&#13;" line1189="    3844443844&#13;" line1190="    7C2A2A3E14&#13;" line1191="    7E02020606&#13;" line1192="    027E027E02&#13;" line1193="    6355494163&#13;" line1194="    3844443C04&#13;" line1195="    407E201E20&#13;" line1196="    06027E0202&#13;" line1197="    99A5E7A599&#13;" line1198="    1C2A492A1C&#13;" line1199="    4C7201724C&#13;" line1200="    304A4D4D30&#13;" line1201="    3048784830&#13;" line1202="    BC625A463D&#13;" line1203="    3E49494900&#13;" line1204="    7E0101017E&#13;" line1205="    2A2A2A2A2A&#13;" line1206="    44445F4444&#13;" line1207="    40514A4440&#13;" line1208="    40444A5140&#13;" line1209="    0000FF0103&#13;" line1210="    E080FF0000&#13;" line1211="    08086B6B08&#13;" line1212="    3612362436&#13;" line1213="    060F090F06&#13;" line1214="    0000181800&#13;" line1215="    0000101000&#13;" line1216="    3040FF0101&#13;" line1217="    001F01011E&#13;" line1218="    00191D1712&#13;" line1219="    003C3C3C3C&#13;" line1220="    0000000000`&#13;" line1221="        loadStarted = false&#13;" line1222="        loadPercent = 0&#13;" line1223="        clear()&#13;" line1224="    }&#13;" line1225="&#13;" line1226="    //% group=&quot;디스플레이 제어(기초)&quot;&#13;" line1227="    //% weight=6&#13;" line1228="    //% block=&quot;디스플레이 지움&quot;&#13;" line1229="    export function clear() {&#13;" line1230="        loadStarted = false&#13;" line1231="        loadPercent = 0&#13;" line1232="        command(SSD1306_SETCOLUMNADRESS)&#13;" line1233="        command(0x00)&#13;" line1234="        command(displayWidth - 1)&#13;" line1235="        command(SSD1306_SETPAGEADRESS)&#13;" line1236="        command(0x00)&#13;" line1237="        command(displayHeight - 1)&#13;" line1238="        let data = pins.createBuffer(17);&#13;" line1239="        data[0] = 0x40; // Data Mode&#13;" line1240="        for (let i = 1; i &lt; 17; i++) {&#13;" line1241="            data[i] = 0x00&#13;" line1242="        }&#13;" line1243="        // send display buffer in 16 byte chunks&#13;" line1244="        for (let j = 0; j &lt; screenSize; j += 16) {&#13;" line1245="            pins.i2cWriteBuffer(chipAdress, data, false)&#13;" line1246="        }&#13;" line1247="        charX = xOffset&#13;" line1248="        charY = yOffset&#13;" line1249="    }&#13;" line1250="&#13;" line1251="    //% group=&quot;디스플레이 제어(기초)&quot;&#13;" line1252="    //% block=&quot;(줄바꿈 없이) 화면에 $str 문장 출력&quot;&#13;" line1253="    export function writeString(str: string) {&#13;" line1254="        for (let k = 0; k &lt; str.length; k++) {&#13;" line1255="            if (charX &gt; displayWidth - 6) {&#13;" line1256="                newLine()&#13;" line1257="            }&#13;" line1258="            drawChar(charX, charY, str.charAt(k))&#13;" line1259="            charX += 6&#13;" line1260="        }&#13;" line1261="    }&#13;" line1262="&#13;" line1263="    //% group=&quot;디스플레이 제어(기초)&quot;&#13;" line1264="    //% block=&quot;(줄바꿈 없이) 화면에 $n 숫자 출력&quot;&#13;" line1265="    export function writeNum(n: number) {&#13;" line1266="        let numString = n.toString()&#13;" line1267="        writeString(numString)&#13;" line1268="    }&#13;" line1269="&#13;" line1270="    //% group=&quot;디스플레이 제어(기초)&quot;&#13;" line1271="    //% block=&quot;화면에 $str 문장 출력&quot;&#13;" line1272="    export function writeStringNewLine(str: string) {&#13;" line1273="        writeString(str)&#13;" line1274="        newLine()&#13;" line1275="    }&#13;" line1276="&#13;" line1277="    //% group=&quot;디스플레이 제어(기초)&quot;&#13;" line1278="    //% block=&quot;화면에 $n 숫자 출력&quot;&#13;" line1279="    export function writeNumNewLine(n: number) {&#13;" line1280="        writeNum(n)&#13;" line1281="        newLine()&#13;" line1282="    }&#13;" line1283="&#13;" line1284="    //% group=&quot;디스플레이 제어(기초)&quot;&#13;" line1285="    //% weight=5&#13;" line1286="    //% block=&quot;줄 바꿈&quot;&#13;" line1287="    export function newLine() {&#13;" line1288="        charY++&#13;" line1289="        charX = xOffset&#13;" line1290="    }&#13;" line1291="&#13;" line1292="    function drawChar(x: number, y: number, c: string) {&#13;" line1293="        command(SSD1306_SETCOLUMNADRESS)&#13;" line1294="        command(x)&#13;" line1295="        command(x + 5)&#13;" line1296="        command(SSD1306_SETPAGEADRESS)&#13;" line1297="        command(y)&#13;" line1298="        command(y + 1)&#13;" line1299="        let line = pins.createBuffer(2)&#13;" line1300="        line[0] = 0x40&#13;" line1301="        for (let l = 0; l &lt; 6; l++) {&#13;" line1302="            if (l === 5) {&#13;" line1303="                line[1] = 0x00&#13;" line1304="            } else {&#13;" line1305="                let charIndex = c.charCodeAt(0)&#13;" line1306="                let charNumber = font.getNumber(NumberFormat.UInt8BE, 5 * charIndex + l)&#13;" line1307="                line[1] = charNumber&#13;" line1308="&#13;" line1309="            }&#13;" line1310="            pins.i2cWriteBuffer(chipAdress, line, false)&#13;" line1311="        }&#13;" line1312="&#13;" line1313="    }&#13;" line1314="    function drawShape(pixels: Array&lt;Array&lt;number&gt;&gt;) {&#13;" line1315="        let x1 = displayWidth&#13;" line1316="        let y1 = displayHeight * 8&#13;" line1317="        let x2 = 0&#13;" line1318="        let y2 = 0&#13;" line1319="        for (let m = 0; m &lt; pixels.length; m++) {&#13;" line1320="            if (pixels[m][0] &lt; x1) {&#13;" line1321="                x1 = pixels[m][0]&#13;" line1322="            }&#13;" line1323="            if (pixels[m][0] &gt; x2) {&#13;" line1324="                x2 = pixels[m][0]&#13;" line1325="            }&#13;" line1326="            if (pixels[m][1] &lt; y1) {&#13;" line1327="                y1 = pixels[m][1]&#13;" line1328="            }&#13;" line1329="            if (pixels[m][1] &gt; y2) {&#13;" line1330="                y2 = pixels[m][1]&#13;" line1331="            }&#13;" line1332="        }&#13;" line1333="        let page1 = Math.floor(y1 / 8)&#13;" line1334="        let page2 = Math.floor(y2 / 8)&#13;" line1335="        let line2 = pins.createBuffer(2)&#13;" line1336="        line2[0] = 0x40&#13;" line1337="        for (let x3 = x1; x3 &lt;= x2; x3++) {&#13;" line1338="            for (let page = page1; page &lt;= page2; page++) {&#13;" line1339="                line2[1] = 0x00&#13;" line1340="                for (let n = 0; n &lt; pixels.length; n++) {&#13;" line1341="                    if (pixels[n][0] === x3) {&#13;" line1342="                        if (Math.floor(pixels[n][1] / 8) === page) {&#13;" line1343="                            line2[1] |= Math.pow(2, (pixels[n][1] % 8))&#13;" line1344="                        }&#13;" line1345="                    }&#13;" line1346="                }&#13;" line1347="                if (line2[1] !== 0x00) {&#13;" line1348="                    command(SSD1306_SETCOLUMNADRESS)&#13;" line1349="                    command(x3)&#13;" line1350="                    command(x3 + 1)&#13;" line1351="                    command(SSD1306_SETPAGEADRESS)&#13;" line1352="                    command(page)&#13;" line1353="                    command(page + 1)&#13;" line1354="                    //line[1] |= pins.i2cReadBuffer(chipAdress, 2)[1]&#13;" line1355="                    pins.i2cWriteBuffer(chipAdress, line2, false)&#13;" line1356="                }&#13;" line1357="            }&#13;" line1358="        }&#13;" line1359="    }&#13;" line1360="&#13;" line1361="    //% group=&quot;디스플레이 제어(심화)&quot;&#13;" line1362="    //% weight=4&#13;" line1363="    //% block=&quot;라인 출력:|x: $x0 y: $y0 에서| x: $x1 y: $y1|까지&quot;&#13;" line1364="    //% x0.defl=0&#13;" line1365="    //% y0.defl=0&#13;" line1366="    //% x1.defl=20&#13;" line1367="    //% y1.defl=20&#13;" line1368="    export function drawLine(x0: number, y0: number, x1: number, y1: number) {&#13;" line1369="        let pixels: Array&lt;Array&lt;number&gt;&gt; = []&#13;" line1370="        let kx: number, ky: number, c: number, o: number, xx: number, yy: number, dx: number, dy: number;&#13;" line1371="        let targetX = x1&#13;" line1372="        let targetY = y1&#13;" line1373="        x1 -= x0; kx = 0; if (x1 &gt; 0) kx = +1; if (x1 &lt; 0) { kx = -1; x1 = -x1; } x1++;&#13;" line1374="        y1 -= y0; ky = 0; if (y1 &gt; 0) ky = +1; if (y1 &lt; 0) { ky = -1; y1 = -y1; } y1++;&#13;" line1375="        if (x1 &gt;= y1) {&#13;" line1376="            c = x1&#13;" line1377="            for (o = 0; o &lt; x1; o++, x0 += kx) {&#13;" line1378="                pixels.push([x0, y0])&#13;" line1379="                c -= y1; if (c &lt;= 0) { if (o != x1 - 1) pixels.push([x0 + kx, y0]); c += x1; y0 += ky; if (o != x1 - 1) pixels.push([x0, y0]); }&#13;" line1380="                if (pixels.length &gt; 20) {&#13;" line1381="                    drawShape(pixels)&#13;" line1382="                    pixels = []&#13;" line1383="                    drawLine(x0, y0, targetX, targetY)&#13;" line1384="                    return&#13;" line1385="                }&#13;" line1386="            }&#13;" line1387="        } else {&#13;" line1388="            c = y1&#13;" line1389="            for (o = 0; o &lt; y1; o++, y0 += ky) {&#13;" line1390="                pixels.push([x0, y0])&#13;" line1391="                c -= x1; if (c &lt;= 0) { if (o != y1 - 1) pixels.push([x0, y0 + ky]); c += y1; x0 += kx; if (o != y1 - 1) pixels.push([x0, y0]); }&#13;" line1392="                if (pixels.length &gt; 20) {&#13;" line1393="                    drawShape(pixels)&#13;" line1394="                    pixels = []&#13;" line1395="                    drawLine(x0, y0, targetX, targetY)&#13;" line1396="                    return&#13;" line1397="                }&#13;" line1398="            }&#13;" line1399="        }&#13;" line1400="        drawShape(pixels)&#13;" line1401="    }&#13;" line1402="&#13;" line1403="    //% group=&quot;디스플레이 제어(심화)&quot;&#13;" line1404="    //% weight=3&#13;" line1405="    //% block=&quot;사각형 출력:| x: $x0 y: $y0 에서| x: $x1 y: $y1|까지&quot;&#13;" line1406="    //% x0.defl=0&#13;" line1407="    //% y0.defl=0&#13;" line1408="    //% x1.defl=20&#13;" line1409="    //% y1.defl=20&#13;" line1410="    export function drawRectangle(x0: number, y0: number, x1: number, y1: number) {&#13;" line1411="        drawLine(x0, y0, x1, y0)&#13;" line1412="        drawLine(x0, y1, x1, y1)&#13;" line1413="        drawLine(x0, y0, x0, y1)&#13;" line1414="        drawLine(x1, y0, x1, y1)&#13;" line1415="    }&#13;" line1416="&#13;" line1417="    //% group=&quot;디스플레이 제어(심화)&quot;&#13;" line1418="    //% weight=2&#13;" line1419="    //% block=&quot;속이 비워진 원(○) 출력:| x: $x y: $y| 크기: radius: $r&quot;&#13;" line1420="    //% x.defl=64&#13;" line1421="    //% y.defl=32&#13;" line1422="    //% r.defl=10&#13;" line1423="    //% weight=0&#13;" line1424="    export function drawCircle(x: number, y: number, r: number) {&#13;" line1425="        let theta = 0;&#13;" line1426="        let step = Math.PI / 90;  // Adjust step for smoothness&#13;" line1427="        let pixels2: Array&lt;Array&lt;number&gt;&gt; = [];&#13;" line1428="&#13;" line1429="        while (theta &lt; 2 * Math.PI) {&#13;" line1430="            let xPos = Math.floor(x + r * Math.cos(theta));&#13;" line1431="            let yPos = Math.floor(y + r * Math.sin(theta));&#13;" line1432="            pixels2.push([xPos, yPos]);&#13;" line1433="            theta += step;&#13;" line1434="        }&#13;" line1435="&#13;" line1436="        drawShape(pixels2);&#13;" line1437="    }&#13;" line1438="&#13;" line1439="    //% group=&quot;디스플레이 제어(심화)&quot;&#13;" line1440="    //% weight=1&#13;" line1441="    //% block=&quot;속이 채워진 원(●) 출력:| x: $x y: $y| 크기: radius: $r&quot;&#13;" line1442="    //% x.defl=64&#13;" line1443="    //% y.defl=32&#13;" line1444="    //% r.defl=10&#13;" line1445="    export function drawFilledCircle(x: number, y: number, r: number) {&#13;" line1446="        for (let dx2 = -r; dx2 &lt;= r; dx2++) {&#13;" line1447="            let height = Math.floor(Math.sqrt(r * r - dx2 * dx2));&#13;" line1448="            drawLine(x + dx2, y - height, x + dx2, y + height);&#13;" line1449="        }&#13;" line1450="    }&#13;" line1451="}" numlines="1452"></mutation><next><block type="typescript_statement" id="rf8)o_@)4IoAO%hgXAB_"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace smbus {&#13;" line1="    export function writeByte(addr: number, register: number, value: number): void {&#13;" line2="        let temp = pins.createBuffer(2);&#13;" line3="        temp[0] = register;&#13;" line4="        temp[1] = value;&#13;" line5="        pins.i2cWriteBuffer(addr, temp, false);&#13;" line6="    }&#13;" line7="    export function writeBuffer(addr: number, register: number, value: Buffer): void {&#13;" line8="        let temp2 = pins.createBuffer(value.length + 1);&#13;" line9="        temp2[0] = register;&#13;" line10="        for (let x4 = 0; x4 &lt; value.length; x4++) {&#13;" line11="            temp2[x4 + 1] = value[x4];&#13;" line12="        }&#13;" line13="        pins.i2cWriteBuffer(addr, temp2, false);&#13;" line14="    }&#13;" line15="    export function readBuffer(addr: number, register: number, len: number): Buffer {&#13;" line16="        let temp3 = pins.createBuffer(1);&#13;" line17="        temp3[0] = register;&#13;" line18="        pins.i2cWriteBuffer(addr, temp3, false);&#13;" line19="        return pins.i2cReadBuffer(addr, len, false);&#13;" line20="    }&#13;" line21="    function readNumber(addr: number, register: number, fmt: NumberFormat = NumberFormat.UInt8LE): number {&#13;" line22="        let temp4 = pins.createBuffer(1);&#13;" line23="        temp4[0] = register;&#13;" line24="        pins.i2cWriteBuffer(addr, temp4, false);&#13;" line25="        return pins.i2cReadNumber(addr, fmt, false);&#13;" line26="    }&#13;" line27="    export function unpack(fmt: string, buf: Buffer): number[] {&#13;" line28="        let le: boolean = true;&#13;" line29="        let offset: number = 0;&#13;" line30="        let result3: number[] = [];&#13;" line31="        let num_format: NumberFormat = 0;&#13;" line32="        for (let e = 0; e &lt; fmt.length; e++) {&#13;" line33="            switch (fmt.charAt(e)) {&#13;" line34="                case '&lt;':&#13;" line35="                    le = true;&#13;" line36="                    continue;&#13;" line37="                case '&gt;':&#13;" line38="                    le = false;&#13;" line39="                    continue;&#13;" line40="                case 'c':&#13;" line41="                case 'B':&#13;" line42="                    num_format = le ? NumberFormat.UInt8LE : NumberFormat.UInt8BE; break;&#13;" line43="                case 'b':&#13;" line44="                    num_format = le ? NumberFormat.Int8LE : NumberFormat.Int8BE; break;&#13;" line45="                case 'H':&#13;" line46="                    num_format = le ? NumberFormat.UInt16LE : NumberFormat.UInt16BE; break;&#13;" line47="                case 'h':&#13;" line48="                    num_format = le ? NumberFormat.Int16LE : NumberFormat.Int16BE; break;&#13;" line49="            }&#13;" line50="            result3.push(buf.getNumber(num_format, offset));&#13;" line51="            offset += pins.sizeOf(num_format);&#13;" line52="        }&#13;" line53="        return result3;&#13;" line54="    }&#13;" line55="}" numlines="56"></mutation></block></next></block></next></block></statement></block></xml>