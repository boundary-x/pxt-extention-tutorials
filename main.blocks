<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="oQ^@?dc$,/!}4U$e56h@" x="39" y="54"><statement name="HANDLER"><block type="typescript_statement" id="s+8vM~-Bw})`.w}h55Y9"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="declare interface Math {&#13;" line1="    floor(x: number): number;&#13;" line2="}" numlines="3"></mutation><next><block type="typescript_statement" id="FiPFdWdT(^t4aU2?R7lt"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace aiPonybot {&#13;" line1="    /**&#13;" line2="     * ---------------PCA9685-------------------&#13;" line3="     */&#13;" line4="    const PCA9685_ADDRESS = 0x40;&#13;" line5="    const MODE1 = 0x00;&#13;" line6="    const MODE2 = 0x01;&#13;" line7="    const SUBADR1 = 0x02;&#13;" line8="    const SUBADR2 = 0x03;&#13;" line9="    const SUBADR3 = 0x04;&#13;" line10="    const PRESCALE = 0xFE;&#13;" line11="    const LED0_ON_L = 0x06;&#13;" line12="    const LED0_ON_H = 0x07;&#13;" line13="    const LED0_OFF_L = 0x08;&#13;" line14="    const LED0_OFF_H = 0x09;&#13;" line15="    const ALL_LED_ON_L = 0xFA;&#13;" line16="    const ALL_LED_ON_H = 0xFB;&#13;" line17="    const ALL_LED_OFF_L = 0xFC;&#13;" line18="    const ALL_LED_OFF_H = 0xFD;&#13;" line19="&#13;" line20="    const STP_CHA_L = 2047;&#13;" line21="    const STP_CHA_H = 4095;&#13;" line22="    const STP_CHB_L = 1;&#13;" line23="    const STP_CHB_H = 2047;&#13;" line24="    const STP_CHC_L = 1023;&#13;" line25="    const STP_CHC_H = 3071;&#13;" line26="    const STP_CHD_L = 3071;&#13;" line27="    const STP_CHD_H = 1023;&#13;" line28="&#13;" line29="    const BYG_CHA_L = 3071;&#13;" line30="    const BYG_CHA_H = 1023;&#13;" line31="    const BYG_CHB_L = 1023;&#13;" line32="    const BYG_CHB_H = 3071;&#13;" line33="    const BYG_CHC_L = 4095;&#13;" line34="    const BYG_CHC_H = 2047;&#13;" line35="    const BYG_CHD_L = 2047;&#13;" line36="    const BYG_CHD_H = 4095;&#13;" line37="&#13;" line38="    export enum Mecanum {&#13;" line39="        //% block=&quot;↖&quot;&#13;" line40="        LeftForward = 1,&#13;" line41="        //% block=&quot;↑&quot;&#13;" line42="        Forward = 2,&#13;" line43="        //% block=&quot;↗&quot;&#13;" line44="        RightForward = 3,&#13;" line45="        //% block=&quot;←&quot;&#13;" line46="        Left = 4,&#13;" line47="        //% block=&quot;s&quot;&#13;" line48="        Stop = 5,&#13;" line49="        //% block=&quot;→&quot;&#13;" line50="        Right = 6,&#13;" line51="        //% block=&quot;↙&quot;&#13;" line52="        LeftBackward = 7,&#13;" line53="        //% block=&quot;↓&quot;&#13;" line54="        Backward = 8,&#13;" line55="        //% block=&quot;↘&quot;&#13;" line56="        RightBackward = 9&#13;" line57="    }&#13;" line58="&#13;" line59="    export enum DirectionControl {&#13;" line60="        //% block=&quot;↑&quot;&#13;" line61="        Forward = 1,&#13;" line62="        //% block=&quot;↓&quot;&#13;" line63="        Backward = 2,&#13;" line64="        //% block=&quot;↶&quot;&#13;" line65="        Clockwise = 3,&#13;" line66="        //% block=&quot;↷&quot;&#13;" line67="        CounterClockwise = 4,&#13;" line68="    }&#13;" line69="&#13;" line70="    export enum Stepper {&#13;" line71="        //% block=&quot;42&quot;&#13;" line72="        Size42 = 1,&#13;" line73="        //% block=&quot;28&quot;&#13;" line74="        Size28 = 2&#13;" line75="    }&#13;" line76="&#13;" line77="    export enum Servo {&#13;" line78="        Servo1 = 0x01,&#13;" line79="        Servo2 = 0x02,&#13;" line80="        Servo3 = 0x03,&#13;" line81="        Servo4 = 0x04,&#13;" line82="        Servo5 = 0x05,&#13;" line83="        Servo6 = 0x06,&#13;" line84="        Servo7 = 0x07,&#13;" line85="        Servo8 = 0x08&#13;" line86="    }&#13;" line87="&#13;" line88="    export enum Motor {&#13;" line89="        Motor1 = 0x1,&#13;" line90="        Motor2 = 0x2,&#13;" line91="        Motor3 = 0x3,&#13;" line92="        Motor4 = 0x4&#13;" line93="    }&#13;" line94="&#13;" line95="    export enum Direction {&#13;" line96="        //% blockId=&quot;정회전&quot; block=&quot;정회전&quot;&#13;" line97="        Clockwise = 1,&#13;" line98="        //% blockId=&quot;역회전&quot; block=&quot;역회전&quot;&#13;" line99="        CounterClockwise = -1,&#13;" line100="    }&#13;" line101="&#13;" line102="    export enum StepperPair {&#13;" line103="        Motors1And2 = 0x1,&#13;" line104="        Motors3And4 = 0x2&#13;" line105="    }&#13;" line106="&#13;" line107="    let initialized = false;&#13;" line108="&#13;" line109="    function i2cWrite(address: number, register: number, value: number) {&#13;" line110="        let buffer = pins.createBuffer(2);&#13;" line111="        buffer[0] = register;&#13;" line112="        buffer[1] = value;&#13;" line113="        pins.i2cWriteBuffer(address, buffer);&#13;" line114="    }&#13;" line115="&#13;" line116="    function i2cCmd(address: number, value: number) {&#13;" line117="        let buffer2 = pins.createBuffer(1);&#13;" line118="        buffer2[0] = value;&#13;" line119="        pins.i2cWriteBuffer(address, buffer2);&#13;" line120="    }&#13;" line121="&#13;" line122="    function i2cRead(address: number, register: number) {&#13;" line123="        pins.i2cWriteNumber(address, register, NumberFormat.UInt8BE);&#13;" line124="        let value = pins.i2cReadNumber(address, NumberFormat.UInt8BE);&#13;" line125="        return value;&#13;" line126="    }&#13;" line127="&#13;" line128="    function initPCA9685(): void {&#13;" line129="        i2cWrite(PCA9685_ADDRESS, MODE1, 0x00);&#13;" line130="        setFreq(50);&#13;" line131="        initialized = true;&#13;" line132="    }&#13;" line133="&#13;" line134="    function setFreq(frequency: number): void {&#13;" line135="        let prescaleValue = 25000000;&#13;" line136="        prescaleValue /= 4096;&#13;" line137="        prescaleValue /= frequency;&#13;" line138="        prescaleValue -= 1;&#13;" line139="        let prescale = prescaleValue;&#13;" line140="        let oldMode = i2cRead(PCA9685_ADDRESS, MODE1);&#13;" line141="        let newMode = (oldMode &amp; 0x7F) | 0x10; // sleep&#13;" line142="        i2cWrite(PCA9685_ADDRESS, MODE1, newMode); // go to sleep&#13;" line143="        i2cWrite(PCA9685_ADDRESS, PRESCALE, prescale); // set the prescaler&#13;" line144="        i2cWrite(PCA9685_ADDRESS, MODE1, oldMode);&#13;" line145="        control.waitMicros(5000);&#13;" line146="        i2cWrite(PCA9685_ADDRESS, MODE1, oldMode | 0xa1);&#13;" line147="    }&#13;" line148="&#13;" line149="    function setPwm(channel: number, on: number, off: number): void {&#13;" line150="        if (channel &lt; 0 || channel &gt; 15) return;&#13;" line151="&#13;" line152="        let buffer3 = pins.createBuffer(5);&#13;" line153="        buffer3[0] = LED0_ON_L + 4 * channel;&#13;" line154="        buffer3[1] = on &amp; 0xff;&#13;" line155="        buffer3[2] = (on &gt;&gt; 8) &amp; 0xff;&#13;" line156="        buffer3[3] = off &amp; 0xff;&#13;" line157="        buffer3[4] = (off &gt;&gt; 8) &amp; 0xff;&#13;" line158="        pins.i2cWriteBuffer(PCA9685_ADDRESS, buffer3);&#13;" line159="    }&#13;" line160="&#13;" line161="    function setStepper28(index: number, direction: boolean): void {&#13;" line162="        if (index == 1) {&#13;" line163="            if (direction) {&#13;" line164="                setPwm(4, STP_CHA_L, STP_CHA_H);&#13;" line165="                setPwm(6, STP_CHB_L, STP_CHB_H);&#13;" line166="                setPwm(5, STP_CHC_L, STP_CHC_H);&#13;" line167="                setPwm(7, STP_CHD_L, STP_CHD_H);&#13;" line168="            } else {&#13;" line169="                setPwm(7, STP_CHA_L, STP_CHA_H);&#13;" line170="                setPwm(5, STP_CHB_L, STP_CHB_H);&#13;" line171="                setPwm(6, STP_CHC_L, STP_CHC_H);&#13;" line172="                setPwm(4, STP_CHD_L, STP_CHD_H);&#13;" line173="            }&#13;" line174="        } else {&#13;" line175="            if (direction) {&#13;" line176="                setPwm(0, STP_CHA_L, STP_CHA_H);&#13;" line177="                setPwm(2, STP_CHB_L, STP_CHB_H);&#13;" line178="                setPwm(1, STP_CHC_L, STP_CHC_H);&#13;" line179="                setPwm(3, STP_CHD_L, STP_CHD_H);&#13;" line180="            } else {&#13;" line181="                setPwm(3, STP_CHA_L, STP_CHA_H);&#13;" line182="                setPwm(1, STP_CHB_L, STP_CHB_H);&#13;" line183="                setPwm(2, STP_CHC_L, STP_CHC_H);&#13;" line184="                setPwm(0, STP_CHD_L, STP_CHD_H);&#13;" line185="            }&#13;" line186="        }&#13;" line187="    }&#13;" line188="&#13;" line189="    function setStepper42(index: number, direction: boolean): void {&#13;" line190="        if (index == 1) {&#13;" line191="            if (direction) {&#13;" line192="                setPwm(7, BYG_CHA_L, BYG_CHA_H);&#13;" line193="                setPwm(6, BYG_CHB_L, BYG_CHB_H);&#13;" line194="                setPwm(5, BYG_CHC_L, BYG_CHC_H);&#13;" line195="                setPwm(4, BYG_CHD_L, BYG_CHD_H);&#13;" line196="            } else {&#13;" line197="                setPwm(7, BYG_CHC_L, BYG_CHC_H);&#13;" line198="                setPwm(6, BYG_CHD_L, BYG_CHD_H);&#13;" line199="                setPwm(5, BYG_CHA_L, BYG_CHA_H);&#13;" line200="                setPwm(4, BYG_CHB_L, BYG_CHB_H);&#13;" line201="            }&#13;" line202="        } else {&#13;" line203="            if (direction) {&#13;" line204="                setPwm(3, BYG_CHA_L, BYG_CHA_H);&#13;" line205="                setPwm(2, BYG_CHB_L, BYG_CHB_H);&#13;" line206="                setPwm(1, BYG_CHC_L, BYG_CHC_H);&#13;" line207="                setPwm(0, BYG_CHD_L, BYG_CHD_H);&#13;" line208="            } else {&#13;" line209="                setPwm(3, BYG_CHC_L, BYG_CHC_H);&#13;" line210="                setPwm(2, BYG_CHD_L, BYG_CHD_H);&#13;" line211="                setPwm(1, BYG_CHA_L, BYG_CHA_H);&#13;" line212="                setPwm(0, BYG_CHB_L, BYG_CHB_H);&#13;" line213="            }&#13;" line214="        }&#13;" line215="    }&#13;" line216="&#13;" line217="    //% blockId=motor_servo block=&quot;|%index|서보모터|%degree|각도로 이동&quot;&#13;" line218="    //% weight=0&#13;" line219="    //% degree.min=0 degree.max=180&#13;" line220="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=4&#13;" line221="    //% group=&quot;서보모터 제어&quot;&#13;" line222="    export function servo(index: Servo, degree: number): void {&#13;" line223="        if (!initialized) {&#13;" line224="            initPCA9685();&#13;" line225="        }&#13;" line226="        let microseconds = (degree * 1800 / 180 + 600); // 0.6ms ~ 2.4ms&#13;" line227="        let value2 = microseconds * 4096 / 20000;&#13;" line228="        setPwm(index + 7, 0, value2);&#13;" line229="    }&#13;" line230="&#13;" line231="    //% weight=0&#13;" line232="    //% blockId=motor_runMotor block=&quot;|%index|모터|%direction|방향|%speed|속도로 회전&quot;&#13;" line233="    //% speed.min=0 speed.max=255&#13;" line234="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2&#13;" line235="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2&#13;" line236="    //% group=&quot;모터 제어(심화)&quot;&#13;" line237="    export function runMotor(index: Motor, direction: Direction, speed: number): void {&#13;" line238="        if (!initialized) {&#13;" line239="            initPCA9685();&#13;" line240="        }&#13;" line241="        if (index === Motor.Motor3 || index === Motor.Motor4) {&#13;" line242="            direction = direction * -1 as Direction;&#13;" line243="        }&#13;" line244="        speed = speed * 16 * direction; // map 255 to 4096&#13;" line245="        if (speed &gt;= 4096) speed = 4095;&#13;" line246="        if (speed &lt;= -4096) speed = -4095;&#13;" line247="        if (index &gt; 4 || index &lt;= 0) return;&#13;" line248="        let positivePin = (4 - index) * 2;&#13;" line249="        let negativePin = (4 - index) * 2 + 1;&#13;" line250="        if (speed &gt;= 0) {&#13;" line251="            setPwm(positivePin, 0, speed);&#13;" line252="            setPwm(negativePin, 0, 0);&#13;" line253="        } else {&#13;" line254="            setPwm(positivePin, 0, 0);&#13;" line255="            setPwm(negativePin, 0, -speed);&#13;" line256="        }&#13;" line257="    }&#13;" line258="&#13;" line259="    //% weight=0&#13;" line260="    //% blockId=motor_runMecanum block=&quot;|메카넘|%direction|방향|%speed|속도로 이동&quot;&#13;" line261="    //% speed.min=0 speed.max=255&#13;" line262="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=3&#13;" line263="    //% group=&quot;모터 제어(기초)&quot;&#13;" line264="    export function runMecanum(direction: Mecanum, speed: number): void {&#13;" line265="        if (!initialized) {&#13;" line266="            initPCA9685();&#13;" line267="        }&#13;" line268="        speed = speed * 16; // map 255 to 4096&#13;" line269="        if (speed &gt;= 4096) speed = 4095;&#13;" line270="        if (speed &lt;= -4096) speed = -4095;&#13;" line271="&#13;" line272="        switch (direction) {&#13;" line273="            case Mecanum.LeftForward: // ↖&#13;" line274="                setPwm(7, 0, speed); setPwm(6, 0, 0); // M1 forward&#13;" line275="                setPwm(5, 0, 0); setPwm(4, 0, 0); // M2 stop&#13;" line276="                setPwm(3, 0, 0); setPwm(2, 0, speed); // M3 forward&#13;" line277="                setPwm(1, 0, 0); setPwm(0, 0, 0); // M4 stop&#13;" line278="                break;&#13;" line279="            case Mecanum.Forward: // ↑&#13;" line280="                setPwm(7, 0, speed); setPwm(6, 0, 0); // M1 forward&#13;" line281="                setPwm(5, 0, speed); setPwm(4, 0, 0); // M2 forward&#13;" line282="                setPwm(3, 0, 0); setPwm(2, 0, speed); // M3 forward&#13;" line283="                setPwm(1, 0, 0); setPwm(0, 0, speed); // M4 forward&#13;" line284="                break;&#13;" line285="            case Mecanum.RightForward: // ↗&#13;" line286="                setPwm(7, 0, 0); setPwm(6, 0, 0); // M1 stop&#13;" line287="                setPwm(5, 0, speed); setPwm(4, 0, 0); // M2 forward&#13;" line288="                setPwm(3, 0, 0); setPwm(2, 0, 0); // M3 stop&#13;" line289="                setPwm(1, 0, 0); setPwm(0, 0, speed); // M4 forward&#13;" line290="                break;&#13;" line291="            case Mecanum.Left: // ←&#13;" line292="                setPwm(7, 0, speed); setPwm(6, 0, 0); // M1 forward&#13;" line293="                setPwm(5, 0, 0); setPwm(4, 0, speed); // M2 backward&#13;" line294="                setPwm(3, 0, 0); setPwm(2, 0, speed); // M3 forward&#13;" line295="                setPwm(1, 0, speed); setPwm(0, 0, 0); // M4 backward&#13;" line296="                break;&#13;" line297="            case Mecanum.Stop: // s&#13;" line298="                setPwm(7, 0, 0); setPwm(6, 0, 0); // M1 stop&#13;" line299="                setPwm(5, 0, 0); setPwm(4, 0, 0); // M2 stop&#13;" line300="                setPwm(3, 0, 0); setPwm(2, 0, 0); // M3 stop&#13;" line301="                setPwm(1, 0, 0); setPwm(0, 0, 0); // M4 stop&#13;" line302="                break;&#13;" line303="            case Mecanum.Right: // →&#13;" line304="                setPwm(7, 0, 0); setPwm(6, 0, speed); // M1 backward&#13;" line305="                setPwm(5, 0, speed); setPwm(4, 0, 0); // M2 forward&#13;" line306="                setPwm(3, 0, speed); setPwm(2, 0, 0); // M3 backward&#13;" line307="                setPwm(1, 0, 0); setPwm(0, 0, speed); // M4 forward&#13;" line308="                break;&#13;" line309="            case Mecanum.LeftBackward: // ↙&#13;" line310="                setPwm(7, 0, 0); setPwm(6, 0, 0); // M1 stop&#13;" line311="                setPwm(5, 0, 0); setPwm(4, 0, speed); // M2 backward&#13;" line312="                setPwm(3, 0, 0); setPwm(2, 0, 0); // M3 stop&#13;" line313="                setPwm(1, 0, speed); setPwm(0, 0, 0); // M4 backward&#13;" line314="                break;&#13;" line315="            case Mecanum.Backward: // ↓&#13;" line316="                setPwm(7, 0, 0); setPwm(6, 0, speed); // M1 backward&#13;" line317="                setPwm(5, 0, 0); setPwm(4, 0, speed); // M2 backward&#13;" line318="                setPwm(3, 0, speed); setPwm(2, 0, 0); // M3 backward&#13;" line319="                setPwm(1, 0, speed); setPwm(0, 0, 0); // M4 backward&#13;" line320="                break;&#13;" line321="            case Mecanum.RightBackward: // ↘&#13;" line322="                setPwm(7, 0, 0); setPwm(6, 0, speed); // M1 backward&#13;" line323="                setPwm(5, 0, 0); setPwm(4, 0, 0); // M2 stop&#13;" line324="                setPwm(3, 0, speed); setPwm(2, 0, 0); // M3 backward&#13;" line325="                setPwm(1, 0, 0); setPwm(0, 0, 0); // M4 stop&#13;" line326="                break;&#13;" line327="        }&#13;" line328="    }&#13;" line329="&#13;" line330="    //% weight=0&#13;" line331="    //% blockId=motor_stopMotor block=&quot;|%index|모터 정지&quot;&#13;" line332="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2 &#13;" line333="    //% group=&quot;모터 제어(심화)&quot;&#13;" line334="    export function stopMotor(index: Motor) {&#13;" line335="        setPwm((4 - index) * 2, 0, 0);&#13;" line336="        setPwm((4 - index) * 2 + 1, 0, 0);&#13;" line337="    }&#13;" line338="&#13;" line339="    //% weight=20&#13;" line340="    //% blockId=motor_stopAllMotors block=&quot;|모든 모터 정지&quot;&#13;" line341="    //% group=&quot;모터 제어(기초)&quot;&#13;" line342="    export function stopAllMotors(): void {&#13;" line343="        for (let idx = 1; idx &lt;= 4; idx++) {&#13;" line344="            stopMotor(idx as Motor);&#13;" line345="        }&#13;" line346="    }&#13;" line347="&#13;" line348="    //% weight=0&#13;" line349="    //% blockId=motor_runNormal block=&quot;|포니봇|%direction|방향|%speed|속도로 이동&quot;&#13;" line350="    //% speed.min=0 speed.max=255&#13;" line351="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2&#13;" line352="    //% group=&quot;모터 제어(기초)&quot;&#13;" line353="    export function runNormal(direction: DirectionControl, speed: number): void {&#13;" line354="        if (!initialized) {&#13;" line355="            initPCA9685();&#13;" line356="        }&#13;" line357="        speed = speed * 16; // map 255 to 4096&#13;" line358="        if (speed &gt;= 4096) speed = 4095;&#13;" line359="        if (speed &lt;= -4096) speed = -4095;&#13;" line360="&#13;" line361="        switch (direction) {&#13;" line362="            case DirectionControl.Forward: // ↑&#13;" line363="                setPwm(7, 0, speed); setPwm(6, 0, 0); // M1 forward&#13;" line364="                setPwm(5, 0, speed); setPwm(4, 0, 0); // M2 forward&#13;" line365="                setPwm(3, 0, 0); setPwm(2, 0, speed); // M3 forward&#13;" line366="                setPwm(1, 0, 0); setPwm(0, 0, speed); // M4 forward&#13;" line367="                break;&#13;" line368="            case DirectionControl.Backward: // ↓&#13;" line369="                setPwm(7, 0, 0); setPwm(6, 0, speed); // M1 backward&#13;" line370="                setPwm(5, 0, 0); setPwm(4, 0, speed); // M2 backward&#13;" line371="                setPwm(3, 0, speed); setPwm(2, 0, 0); // M3 backward&#13;" line372="                setPwm(1, 0, speed); setPwm(0, 0, 0); // M4 backward&#13;" line373="                break;&#13;" line374="            case DirectionControl.Clockwise: // ↶&#13;" line375="                setPwm(7, 0, speed); setPwm(6, 0, 0); // M1 forward&#13;" line376="                setPwm(5, 0, speed); setPwm(4, 0, 0); // M2 forward&#13;" line377="                setPwm(3, 0, speed); setPwm(2, 0, 0); // M3 backward&#13;" line378="                setPwm(1, 0, speed); setPwm(0, 0, 0); // M4 backward&#13;" line379="                break;&#13;" line380="            case DirectionControl.CounterClockwise: // ↷&#13;" line381="                setPwm(7, 0, 0); setPwm(6, 0, speed); // M1 backward&#13;" line382="                setPwm(5, 0, 0); setPwm(4, 0, speed); // M2 backward&#13;" line383="                setPwm(3, 0, 0); setPwm(2, 0, speed); // M3 forward&#13;" line384="                setPwm(1, 0, 0); setPwm(0, 0, speed); // M4 forward&#13;" line385="                break;&#13;" line386="        }&#13;" line387="    }&#13;" line388="&#13;" line389="    /**&#13;" line390="     * ---------------line sensor-------------------&#13;" line391="     */&#13;" line392="    export enum TwoLineState {&#13;" line393="        //% block=&quot;◌ ◌ &quot; &#13;" line394="        OffOff = 0,&#13;" line395="        //% block=&quot;● ●&quot; &#13;" line396="        OnOn = 1,&#13;" line397="        //% block=&quot;● ◌&quot; &#13;" line398="        OnOff = 2,&#13;" line399="        //% block=&quot;◌ ●&quot; &#13;" line400="        OffOn = 3,&#13;" line401="    }&#13;" line402="&#13;" line403="    export enum LineState {&#13;" line404="        //% block=&quot;◌&quot; &#13;" line405="        Off = 0,&#13;" line406="        //% block=&quot;●&quot; &#13;" line407="        On = 1&#13;" line408="    }&#13;" line409="&#13;" line410="    export enum LineSensorChannel {&#13;" line411="        //% block=&quot;왼쪽&quot;&#13;" line412="        Left = 1,&#13;" line413="        //% block=&quot;오른쪽&quot;&#13;" line414="        Right = 2,&#13;" line415="    }&#13;" line416="&#13;" line417="    //% blockId=&quot;checkTwoLineState&quot;&#13;" line418="    //% block=&quot;두 라인 센서의 값이 %state&quot;&#13;" line419="    //% state.shadow=&quot;dropdown&quot;&#13;" line420="    //% group=&quot;라인 감지 센서&quot;&#13;" line421="    //% weight=0&#13;" line422="    export function checkTwoLineState(state: TwoLineState): boolean {&#13;" line423="        const leftSensor = pins.digitalReadPin(DigitalPin.P16);&#13;" line424="        const rightSensor = pins.digitalReadPin(DigitalPin.P15);&#13;" line425="&#13;" line426="        switch (state) {&#13;" line427="            case TwoLineState.OffOff:&#13;" line428="                return leftSensor === 0 &amp;&amp; rightSensor === 0;&#13;" line429="            case TwoLineState.OnOn:&#13;" line430="                return leftSensor === 1 &amp;&amp; rightSensor === 1;&#13;" line431="            case TwoLineState.OnOff:&#13;" line432="                return leftSensor === 1 &amp;&amp; rightSensor === 0;&#13;" line433="            case TwoLineState.OffOn:&#13;" line434="                return leftSensor === 0 &amp;&amp; rightSensor === 1;&#13;" line435="            default:&#13;" line436="                return false;&#13;" line437="        }&#13;" line438="    }&#13;" line439="&#13;" line440="    //% blockId=&quot;checkSingleLineSensor&quot;&#13;" line441="    //% block=&quot;%channel 라인 센서의 값이 %state&quot;&#13;" line442="    //% channel.shadow=&quot;dropdown&quot;&#13;" line443="    //% state.shadow=&quot;dropdown&quot;&#13;" line444="    //% group=&quot;라인 감지 센서&quot;&#13;" line445="    //% weight=0&#13;" line446="    export function checkSingleLineSensor(channel: LineSensorChannel, state: LineState): boolean {&#13;" line447="        const sensorValue = channel === LineSensorChannel.Left&#13;" line448="            ? pins.digitalReadPin(DigitalPin.P16)&#13;" line449="            : pins.digitalReadPin(DigitalPin.P15);&#13;" line450="        return sensorValue === state;&#13;" line451="    }&#13;" line452="&#13;" line453="    //% blockId=&quot;readLineSensor&quot;&#13;" line454="    //% block=&quot;%channel 라인 센서 값 읽기&quot;&#13;" line455="    //% channel.shadow=&quot;dropdown&quot;&#13;" line456="    //% group=&quot;라인 감지 센서&quot;&#13;" line457="    //% weight=0&#13;" line458="    export function readLineSensor(channel: LineSensorChannel): number {&#13;" line459="        return channel === LineSensorChannel.Left&#13;" line460="            ? pins.digitalReadPin(DigitalPin.P16)&#13;" line461="            : pins.digitalReadPin(DigitalPin.P15);&#13;" line462="    }&#13;" line463="&#13;" line464="    /**&#13;" line465="     * ---------------sonar sensor-------------------&#13;" line466="     */&#13;" line467="    export enum PingUnit {&#13;" line468="        //% block=&quot;마이크로초&quot;&#13;" line469="        MicroSeconds,&#13;" line470="        //% block=&quot;센티미터&quot;&#13;" line471="        Centimeters,&#13;" line472="        //% block=&quot;인치&quot;&#13;" line473="        Inches&#13;" line474="    }&#13;" line475="&#13;" line476="    //% blockId=sonar_ping &#13;" line477="    //% block=&quot;%unit 단위로 측정한 거리&quot;&#13;" line478="    //% unit.shadow=&quot;dropdown&quot;&#13;" line479="    //% group=&quot;거리 감지 센서&quot;&#13;" line480="    //% weight=0&#13;" line481="    export function ping(unit: PingUnit, maxCmDistance = 500): number {&#13;" line482="        const trigger = DigitalPin.P13; // Trig 핀 기본값&#13;" line483="        const echo = DigitalPin.P14; // Echo 핀 기본값&#13;" line484="        pins.setPull(trigger, PinPullMode.PullNone);&#13;" line485="        pins.digitalWritePin(trigger, 0);&#13;" line486="        control.waitMicros(2);&#13;" line487="        pins.digitalWritePin(trigger, 1);&#13;" line488="        control.waitMicros(10);&#13;" line489="        pins.digitalWritePin(trigger, 0);&#13;" line490="&#13;" line491="        const distance = pins.pulseIn(echo, PulseValue.High, maxCmDistance * 58);&#13;" line492="&#13;" line493="        if (distance === 0) {&#13;" line494="            switch (unit) {&#13;" line495="                case PingUnit.Centimeters: return maxCmDistance;&#13;" line496="                case PingUnit.Inches: return Math.idiv(maxCmDistance * 100, 254);&#13;" line497="                default: return maxCmDistance * 58;&#13;" line498="            }&#13;" line499="        }&#13;" line500="&#13;" line501="        switch (unit) {&#13;" line502="            case PingUnit.Centimeters: return Math.idiv(distance, 58);&#13;" line503="            case PingUnit.Inches: return Math.idiv(distance, 148);&#13;" line504="            default: return distance;&#13;" line505="        }&#13;" line506="    }&#13;" line507="&#13;" line508="    /**&#13;" line509="     * ---------------color sensor-------------------&#13;" line510="     */&#13;" line511="    export enum DetectedColor {&#13;" line512="        //% block=&quot;빨간색&quot;&#13;" line513="        Red,&#13;" line514="        //% block=&quot;초록색&quot;&#13;" line515="        Green,&#13;" line516="        //% block=&quot;파란색&quot;&#13;" line517="        Blue,&#13;" line518="        //% block=&quot;노란색&quot;&#13;" line519="        Yellow&#13;" line520="    }&#13;" line521="&#13;" line522="    class Tcs3472 {&#13;" line523="        isSetup: boolean;&#13;" line524="        address: number;&#13;" line525="        leds: DigitalPin;&#13;" line526="&#13;" line527="        constructor(address: number) {&#13;" line528="            this.isSetup = false;&#13;" line529="            this.address = address;&#13;" line530="        }&#13;" line531="&#13;" line532="        setup(): void {&#13;" line533="            if (this.isSetup) return;&#13;" line534="            this.isSetup = true;&#13;" line535="            smbus.writeByte(this.address, 0x80, 0x03); // Enable register: PON | AEN&#13;" line536="            smbus.writeByte(this.address, 0x81, 0x2b); // Integration time: 103.2ms&#13;" line537="        }&#13;" line538="&#13;" line539="        setIntegrationTime(time: number): void {&#13;" line540="            this.setup();&#13;" line541="            time = Math.clamp(0, 255, time * 10 / 24);&#13;" line542="            smbus.writeByte(this.address, 0x81, 255 - time);&#13;" line543="        }&#13;" line544="&#13;" line545="        light(): number {&#13;" line546="            return this.raw()[0]; // Clear channel 값 반환&#13;" line547="        }&#13;" line548="&#13;" line549="        rgb(): number[] {&#13;" line550="            let result: number[] = this.raw();&#13;" line551="            let clear: number = result.shift(); // Clear 값을 제거하고 저장&#13;" line552="            if (clear === 0) return [0, 0, 0]; // Clear가 0이면 기본값 반환&#13;" line553="            for (let index: number = 0; index &lt; result.length; index++) {&#13;" line554="                result[index] = result[index] * 255 / clear; // RGB 값을 Clear로 정규화&#13;" line555="            }&#13;" line556="            return result; // [R, G, B]&#13;" line557="        }&#13;" line558="&#13;" line559="        raw(): number[] {&#13;" line560="            this.setup();&#13;" line561="            try {&#13;" line562="                let result2: Buffer = smbus.readBuffer(this.address, 0xb4, pins.sizeOf(NumberFormat.UInt16LE) * 4);&#13;" line563="                return smbus.unpack(&quot;HHHH&quot;, result2); // [Clear, R, G, B]&#13;" line564="            } catch (e) {&#13;" line565="                return [0, 0, 0, 0]; // I2C 오류 시 기본값 반환&#13;" line566="            }&#13;" line567="        }&#13;" line568="    }&#13;" line569="&#13;" line570="    let colorSensor: Tcs3472 = new Tcs3472(0x29); // 기본 I2C 주소 0x29&#13;" line571="&#13;" line572="    //% blockId=brickcell_color_tcs34725_get_light&#13;" line573="    //% block=&quot;밝기(B) 값 읽기&quot;&#13;" line574="    //% group=&quot;색상 감지 센서&quot;&#13;" line575="    export function getLight(): number {&#13;" line576="        return Math.round(colorSensor.light());&#13;" line577="    }&#13;" line578="&#13;" line579="    //% blockId=brickcell_color_tcs34725_get_red&#13;" line580="    //% block=&quot;빨간색(R) 색상 값 읽기&quot;&#13;" line581="    //% group=&quot;색한다상 감지 센서&quot;&#13;" line582="    export function getRed(): number {&#13;" line583="        return Math.round(colorSensor.rgb()[0]);&#13;" line584="    }&#13;" line585="&#13;" line586="    //% blockId=brickcell_color_tcs34725_get_green&#13;" line587="    //% block=&quot;초록색(G) 색상 값 읽기&quot;&#13;" line588="    //% group=&quot;색상 감지 센서&quot;&#13;" line589="    export function getGreen(): number {&#13;" line590="        return Math.round(colorSensor.rgb()[1]);&#13;" line591="    }&#13;" line592="&#13;" line593="    //% blockId=brickcell_color_tcs34725_get_blue&#13;" line594="    //% block=&quot;파란색(B) 색상 값 읽기&quot;&#13;" line595="    //% group=&quot;색상 감지 센서&quot;&#13;" line596="    export function getBlue(): number {&#13;" line597="        return Math.round(colorSensor.rgb()[2]);&#13;" line598="    }&#13;" line599="&#13;" line600="    //% blockId=brickcell_color_tcs34725_set_integration_time&#13;" line601="    //% block=&quot;색상 통합 시간을 %time ms로 설정&quot;&#13;" line602="    //% time.min=0 time.max=612 value.defl=500&#13;" line603="    //% group=&quot;색상 감지 센서&quot;&#13;" line604="    export function setColorIntegrationTime(time: number): void {&#13;" line605="        return colorSensor.setIntegrationTime(time);&#13;" line606="    }&#13;" line607="&#13;" line608="    //% blockId=color_sensor_is_color_advanced&#13;" line609="    //% block=&quot;감지된 색상이 %color (임계값 %threshold)&quot;&#13;" line610="    //% threshold.min=10 threshold.max=100 threshold.defl=40&#13;" line611="    //% group=&quot;색상 감지 센서&quot;&#13;" line612="    export function isColorAdvanced(color: DetectedColor, threshold: number = 40): boolean {&#13;" line613="        const rgb = colorSensor.rgb();&#13;" line614="        const red = rgb[0];&#13;" line615="        const green = rgb[1];&#13;" line616="        const blue = rgb[2];&#13;" line617="        const clear2 = colorSensor.light();&#13;" line618="&#13;" line619="        if (clear2 &lt; 100) return false;&#13;" line620="&#13;" line621="        const total = red + green + blue;&#13;" line622="        if (total === 0) return false;&#13;" line623="&#13;" line624="        const redRatio = red / total;&#13;" line625="        const greenRatio = green / total;&#13;" line626="        const blueRatio = blue / total;&#13;" line627="&#13;" line628="        const thresholdRatio = threshold / 255;&#13;" line629="&#13;" line630="        switch (color) {&#13;" line631="            case DetectedColor.Red:&#13;" line632="                return redRatio &gt; greenRatio + thresholdRatio &amp;&amp;&#13;" line633="                    redRatio &gt; blueRatio + thresholdRatio &amp;&amp;&#13;" line634="                    redRatio &gt; 0.4;&#13;" line635="            case DetectedColor.Green:&#13;" line636="                return greenRatio &gt; redRatio + thresholdRatio &amp;&amp;&#13;" line637="                    greenRatio &gt; blueRatio + thresholdRatio &amp;&amp;&#13;" line638="                    greenRatio &gt; 0.4;&#13;" line639="            case DetectedColor.Blue:&#13;" line640="                return blueRatio &gt; redRatio + thresholdRatio &amp;&amp;&#13;" line641="                    blueRatio &gt; greenRatio + thresholdRatio * 0.8 &amp;&amp;&#13;" line642="                    blueRatio &gt; 0.35;&#13;" line643="            case DetectedColor.Yellow:&#13;" line644="                return redRatio &gt; blueRatio + thresholdRatio &amp;&amp;&#13;" line645="                    greenRatio &gt; blueRatio + thresholdRatio &amp;&amp;&#13;" line646="                    Math.abs(redRatio - greenRatio) &lt; 0.1 &amp;&amp;&#13;" line647="                    redRatio + greenRatio &gt; 0.6;&#13;" line648="            default:&#13;" line649="                return false;&#13;" line650="        }&#13;" line651="    }&#13;" line652="&#13;" line653="    //% blockId=color_sensor_is_in_range&#13;" line654="    //% block=&quot;R: %minR ~ %maxR, G: %minG ~ %maxG, B: %minB ~ %maxB&quot;&#13;" line655="    //% minR.min=0 minR.max=255 minR.defl=0&#13;" line656="    //% maxR.min=0 maxR.max=255 maxR.defl=255&#13;" line657="    //% minG.min=0 minG.max=255 minG.defl=0&#13;" line658="    //% maxG.min=0 maxG.max=255 maxG.defl=255&#13;" line659="    //% minB.min=0 minB.max=255 minB.defl=0&#13;" line660="    //% maxB.min=0 maxB.max=255 maxB.defl=255&#13;" line661="    //% group=&quot;색상 감지 센서&quot;&#13;" line662="    //% inlineInputMode=inline&#13;" line663="    export function isColorInRange(minR: number, maxR: number, minG: number, maxG: number, minB: number, maxB: number): boolean {&#13;" line664="        const rgb2 = colorSensor.rgb();&#13;" line665="        const red2 = rgb2[0];&#13;" line666="        const green2 = rgb2[1];&#13;" line667="        const blue2 = rgb2[2];&#13;" line668="&#13;" line669="        return red2 &gt; minR &amp;&amp; red2 &lt; maxR &amp;&amp;&#13;" line670="            green2 &gt; minG &amp;&amp; green2 &lt; maxG &amp;&amp;&#13;" line671="            blue2 &gt; minB &amp;&amp; blue2 &lt; maxB;&#13;" line672="    }&#13;" line673="&#13;" line674="    /**&#13;" line675="     * ---------------oled display(od01)-------------------&#13;" line676="     */&#13;" line677="    const FONT_5X7 = hex``;&#13;" line678="    export enum Display {&#13;" line679="        //% block=&quot;ON&quot;&#13;" line680="        On = 1,&#13;" line681="        //% block=&quot;OFF&quot;&#13;" line682="        Off = 0&#13;" line683="    }&#13;" line684="&#13;" line685="    const MIN_X = 0;&#13;" line686="    const MIN_Y = 0;&#13;" line687="    const MAX_X = 127;&#13;" line688="    const MAX_Y = 63;&#13;" line689="&#13;" line690="    let i2cAddress = 60;&#13;" line691="    let screen = pins.createBuffer(1025);&#13;" line692="    let buffer22 = pins.createBuffer(2);&#13;" line693="    let buffer32 = pins.createBuffer(3);&#13;" line694="    let buffer4 = pins.createBuffer(4);&#13;" line695="    let buffer7 = pins.createBuffer(7);&#13;" line696="    let buffer13 = pins.createBuffer(13);&#13;" line697="    buffer7[0] = 0x40;&#13;" line698="    buffer13[0] = 0x40;&#13;" line699="    let drawEnabled = 1;&#13;" line700="    let cursorX = 0;&#13;" line701="    let cursorY = 0;&#13;" line702="&#13;" line703="    let zoomEnabled = 0;&#13;" line704="    let doubleSize = 0;&#13;" line705="&#13;" line706="    function cmd1(data: number) {&#13;" line707="        let number = data % 256;&#13;" line708="        pins.i2cWriteNumber(i2cAddress, number, NumberFormat.UInt16BE);&#13;" line709="    }&#13;" line710="&#13;" line711="    function cmd2(data1: number, data2: number) {&#13;" line712="        buffer32[0] = 0;&#13;" line713="        buffer32[1] = data1;&#13;" line714="        buffer32[2] = data2;&#13;" line715="        pins.i2cWriteBuffer(i2cAddress, buffer32);&#13;" line716="    }&#13;" line717="&#13;" line718="    function cmd3(data1: number, data2: number, data3: number) {&#13;" line719="        buffer4[0] = 0;&#13;" line720="        buffer4[1] = data1;&#13;" line721="        buffer4[2] = data2;&#13;" line722="        buffer4[3] = data3;&#13;" line723="        pins.i2cWriteBuffer(i2cAddress, buffer4);&#13;" line724="    }&#13;" line725="&#13;" line726="    function setPosition(column: number = 0, page: number = 0) {&#13;" line727="        cmd1(0xb0 | page);&#13;" line728="        cmd1(0x00 | (column % 16));&#13;" line729="        cmd1(0x10 | (column &gt;&gt; 4));&#13;" line730="    }&#13;" line731="&#13;" line732="    function clearBit(data: number, bit: number): number {&#13;" line733="        if (data &amp; (1 &lt;&lt; bit)) data -= (1 &lt;&lt; bit);&#13;" line734="        return data;&#13;" line735="    }&#13;" line736="&#13;" line737="    function draw(data: number) {&#13;" line738="        if (data &gt; 0) {&#13;" line739="            setPosition();&#13;" line740="            pins.i2cWriteBuffer(i2cAddress, screen);&#13;" line741="        }&#13;" line742="    }&#13;" line743="&#13;" line744="    //% block=&quot;디스플레이 색상 반전 %on&quot;&#13;" line745="    //% blockGap=8&#13;" line746="    //% group=&quot;디스플레이 제어&quot;&#13;" line747="    //% on.shadow=&quot;toggleOnOff&quot;&#13;" line748="    //% weight=2&#13;" line749="    export function invert(on: boolean = true) {&#13;" line750="        let command = (on) ? 0xA7 : 0xA6;&#13;" line751="        cmd1(command);&#13;" line752="    }&#13;" line753="&#13;" line754="    //% block=&quot;디스플레이 지우기&quot;&#13;" line755="    //% blockGap=8&#13;" line756="    //% group=&quot;디스플레이 제어&quot;&#13;" line757="    //% weight=3&#13;" line758="    export function clear() {&#13;" line759="        cursorX = cursorY = 0;&#13;" line760="        screen.fill(0);&#13;" line761="        screen[0] = 0x40;&#13;" line762="        draw(1);&#13;" line763="    }&#13;" line764="&#13;" line765="    //% block=&quot;디스플레이 화면 %on&quot;&#13;" line766="    //% on.defl=1&#13;" line767="    //% blockGap=8&#13;" line768="    //% group=&quot;디스플레이 제어&quot;&#13;" line769="    //% on.shadow=&quot;toggleOnOff&quot;&#13;" line770="    //% weight=1&#13;" line771="    export function display(on: boolean) {&#13;" line772="        if (on) cmd1(0xAF);&#13;" line773="        else cmd1(0xAE);&#13;" line774="    }&#13;" line775="&#13;" line776="    //% block=&quot;픽셀 출력 - 위치: x %x y %y, 색상: %color&quot;&#13;" line777="    //% x.max=127 x.min=0 x.defl=0&#13;" line778="    //% y.max=63 y.min=0 y.defl=0&#13;" line779="    //% color.max=1 color.min=0 color.defl=1&#13;" line780="    //% blockGap=8 inlineInputMode=inline&#13;" line781="    //% group=&quot;디스플레이 제어(도형)&quot;&#13;" line782="    //% weight=4&#13;" line783="    export function pixel(x: number, y: number, color: number = 1) {&#13;" line784="        let page = y &gt;&gt; 3;&#13;" line785="        let shiftPage = y % 8;&#13;" line786="        let index2 = x + page * 128 + 1;&#13;" line787="        let byte = (color) ? (screen[index2] | (1 &lt;&lt; shiftPage)) : clearBit(screen[index2], shiftPage);&#13;" line788="        screen[index2] = byte;&#13;" line789="    }&#13;" line790="&#13;" line791="    function char(character: string, column: number, row: number, color: number = 1) {&#13;" line792="        let position = (Math.min(127, Math.max(character.charCodeAt(0), 32)) - 32) * 5;&#13;" line793="        let margin = 0;&#13;" line794="        let index3 = column + row * 128 + 1;&#13;" line795="&#13;" line796="        if (doubleSize) {&#13;" line797="            for (let i = 0; i &lt; 5; i++) {&#13;" line798="                let line = 0;&#13;" line799="                for (let j = 0; j &lt; 8; j++) {&#13;" line800="                    if (color &gt; 0 ? FONT_5X7[position + i] &amp; (1 &lt;&lt; j) : !(FONT_5X7[position + i] &amp; (1 &lt;&lt; j))) {&#13;" line801="                        pixel(column + margin, row * 8 + line);&#13;" line802="                        pixel(column + margin, row * 8 + line + 1);&#13;" line803="                        pixel(column + margin + 1, row * 8 + line);&#13;" line804="                        pixel(column + margin + 1, row * 8 + line + 1);&#13;" line805="                    }&#13;" line806="                    line += 2;&#13;" line807="                }&#13;" line808="                margin += 2;&#13;" line809="            }&#13;" line810="            let line2 = 0;&#13;" line811="            for (let k = 0; k &lt; 8; k++) {&#13;" line812="                if (color == 0) {&#13;" line813="                    pixel(column + 10, row * 8 + line2);&#13;" line814="                    pixel(column + 10, row * 8 + line2 + 1);&#13;" line815="                    pixel(column + 11, row * 8 + line2);&#13;" line816="                    pixel(column + 11, row * 8 + line2 + 1);&#13;" line817="                }&#13;" line818="                line2 += 2;&#13;" line819="            }&#13;" line820="        } else {&#13;" line821="            let l = 0;&#13;" line822="            for (let m = 0; m &lt; 5; m++) {&#13;" line823="                screen[index3 + m] = (color &gt; 0) ? FONT_5X7[position + m] : FONT_5X7[position + m] ^ 0xFF;&#13;" line824="                if (zoomEnabled) {&#13;" line825="                    buffer13[l + 1] = screen[index3 + m];&#13;" line826="                    buffer13[l + 2] = screen[index3 + m];&#13;" line827="                } else {&#13;" line828="                    buffer7[m + 1] = screen[index3 + m];&#13;" line829="                }&#13;" line830="                l += 2;&#13;" line831="            }&#13;" line832="            screen[index3 + 5] = (color &gt; 0) ? 0 : 0xFF;&#13;" line833="            if (zoomEnabled) {&#13;" line834="                buffer13[12] = screen[index3 + 5];&#13;" line835="            } else {&#13;" line836="                buffer7[6] = screen[index3 + 5];&#13;" line837="            }&#13;" line838="            setPosition(column, row);&#13;" line839="            if (zoomEnabled) {&#13;" line840="                pins.i2cWriteBuffer(i2cAddress, buffer13);&#13;" line841="            } else {&#13;" line842="                pins.i2cWriteBuffer(i2cAddress, buffer7);&#13;" line843="            }&#13;" line844="        }&#13;" line845="    }&#13;" line846="&#13;" line847="    //% block=&quot;문장 출력 - 내용: %s, 위치: %column열 %row행, 색상: %color&quot;&#13;" line848="    //% s.defl='AI ponybot'&#13;" line849="    //% column.max=120 column.min=0 column.defl=0&#13;" line850="    //% row.max=7 row.min=0 row.defl=0&#13;" line851="    //% color.max=1 color.min=0 color.defl=1&#13;" line852="    //% blockGap=8 inlineInputMode=inline&#13;" line853="    //% group=&quot;디스플레이 제어(데이터)&quot;&#13;" line854="    //% weight=1&#13;" line855="    export function showString(text: string, column: number, row: number, color: number = 1) {&#13;" line856="        let steps = doubleSize ? 12 : 6;&#13;" line857="        for (let index4 = 0; index4 &lt; text.length; index4++) {&#13;" line858="            char(text.charAt(index4), column, row, color);&#13;" line859="            column += steps;&#13;" line860="        }&#13;" line861="        if (doubleSize) draw(1);&#13;" line862="    }&#13;" line863="&#13;" line864="    //% block=&quot;숫자 출력 - 내용: %num, 위치: %column열 %row행, 색상: %color&quot;&#13;" line865="    //% num.defl=777&#13;" line866="    //% column.max=120 column.min=0 column.defl=0&#13;" line867="    //% row.max=7 row.min=0 row.defl=0&#13;" line868="    //% color.max=1 color.min=0 color.defl=1&#13;" line869="    //% blockGap=8 inlineInputMode=inline&#13;" line870="    //% group=&quot;디스플레이 제어(데이터)&quot;&#13;" line871="    //% weight=3&#13;" line872="    export function showNumber(number: number, column: number, row: number, color: number = 1) {&#13;" line873="        showString(number.toString(), column, row, color);&#13;" line874="    }&#13;" line875="&#13;" line876="    function scroll() {&#13;" line877="        cursorX = 0;&#13;" line878="        cursorY += doubleSize ? 2 : 1;&#13;" line879="        if (cursorY &gt; 7) {&#13;" line880="            cursorY = 7;&#13;" line881="            screen.shift(128);&#13;" line882="            screen[0] = 0x40;&#13;" line883="            draw(1);&#13;" line884="        }&#13;" line885="    }&#13;" line886="&#13;" line887="    //% block=&quot;문장 출력 - 내용: %s, 줄바꿈: %newline&quot;&#13;" line888="    //% s.defl=&quot;AI ponybot&quot;&#13;" line889="    //% newline.defl=true&#13;" line890="    //% blockGap=8 inlineInputMode=inline&#13;" line891="    //% group=&quot;디스플레이 제어(데이터)&quot;&#13;" line892="    //% weight=2&#13;" line893="    export function printString(text: string, newline: boolean = true) {&#13;" line894="        let steps2 = doubleSize ? 12 : 6;&#13;" line895="        for (let index5 = 0; index5 &lt; text.length; index5++) {&#13;" line896="            char(text.charAt(index5), cursorX, cursorY, 1);&#13;" line897="            cursorX += steps2;&#13;" line898="            if (cursorX &gt; 120) scroll();&#13;" line899="        }&#13;" line900="        if (newline) scroll();&#13;" line901="        if (doubleSize) draw(1);&#13;" line902="    }&#13;" line903="&#13;" line904="    //% block=&quot;숫자 출력 - 내용: %num, 줄바꿈: %newline&quot;&#13;" line905="    //% num.defl=&quot;777&quot;&#13;" line906="    //% newline.defl=true&#13;" line907="    //% weight=86 blockGap=8 inlineInputMode=inline&#13;" line908="    //% group=&quot;디스플레이 제어(데이터)&quot;&#13;" line909="    //% weight=4&#13;" line910="    export function printNumber(number: number, newline: boolean = true) {&#13;" line911="        printString(number.toString(), newline);&#13;" line912="    }&#13;" line913="&#13;" line914="    //% block=&quot;수평선 출력 - 위치: x %x y %y, 길이: %length, 색상: %color&quot;&#13;" line915="    //% x.max=127 x.min=0 x.defl=0&#13;" line916="    //% y.max=63 y.min=0 y.defl=0&#13;" line917="    //% length.max=128 length.min=1 length.defl=16&#13;" line918="    //% color.max=1 color.min=0 color.defl=1&#13;" line919="    //% blockGap=8 inlineInputMode=inline&#13;" line920="    //% group=&quot;디스플레이 제어(도형)&quot;&#13;" line921="    //% weight=2&#13;" line922="    export function horizontalLine(x: number, y: number, length: number, color: number = 1) {&#13;" line923="        let savedDraw = drawEnabled;&#13;" line924="        if ((y &lt; MIN_Y) || (y &gt; MAX_Y)) return;&#13;" line925="        drawEnabled = 0;&#13;" line926="        for (let n = x; n &lt; (x + length); n++)&#13;" line927="            if ((n &gt;= MIN_X) &amp;&amp; (n &lt;= MAX_X))&#13;" line928="                pixel(n, y, color);&#13;" line929="        drawEnabled = savedDraw;&#13;" line930="        draw(drawEnabled);&#13;" line931="    }&#13;" line932="&#13;" line933="    //% block=&quot;수직선 출력 - 위치: x %x y %y, 길이: %length, 색상: %color&quot;&#13;" line934="    //% x.max=127 x.min=0 x.defl=0&#13;" line935="    //% y.max=63 y.min=0 y.defl=0&#13;" line936="    //% length.max=128 length.min=1 length.defl=16&#13;" line937="    //% color.max=1 color.min=0 color.defl=1&#13;" line938="    //% blockGap=8 inlineInputMode=inline&#13;" line939="    //% group=&quot;디스플레이 제어(도형)&quot;&#13;" line940="    //% weight=1&#13;" line941="    export function verticalLine(x: number, y: number, length: number, color: number = 1) {&#13;" line942="        let savedDraw2 = drawEnabled;&#13;" line943="        drawEnabled = 0;&#13;" line944="        if ((x &lt; MIN_X) || (x &gt; MAX_X)) return;&#13;" line945="        for (let o = y; o &lt; (y + length); o++)&#13;" line946="            if ((o &gt;= MIN_Y) &amp;&amp; (o &lt;= MAX_Y))&#13;" line947="                pixel(x, o, color);&#13;" line948="        drawEnabled = savedDraw2;&#13;" line949="        draw(drawEnabled);&#13;" line950="    }&#13;" line951="&#13;" line952="    //% block=&quot;사각형 출력 - x1 %x1 y1 %y1 x2 %x2 y2 %y2, 색상: %color&quot;&#13;" line953="    //% color.defl=1&#13;" line954="    //% blockGap=8 inlineInputMode=inline&#13;" line955="    //% group=&quot;디스플레이 제어(도형)&quot;&#13;" line956="    //% weight=3&#13;" line957="    export function rectangle(x1: number, y1: number, x2: number, y2: number, color: number = 1) {&#13;" line958="        if (x1 &gt; x2) x1 = [x2, x2 = x1][0];&#13;" line959="        if (y1 &gt; y2) y1 = [y2, y2 = y1][0];&#13;" line960="        drawEnabled = 0;&#13;" line961="        horizontalLine(x1, y1, x2 - x1 + 1, color);&#13;" line962="        horizontalLine(x1, y2, x2 - x1 + 1, color);&#13;" line963="        verticalLine(x1, y1, y2 - y1 + 1, color);&#13;" line964="        verticalLine(x2, y1, y2 - y1 + 1, color);&#13;" line965="        drawEnabled = 1;&#13;" line966="        draw(1);&#13;" line967="    }&#13;" line968="&#13;" line969="    function init() {&#13;" line970="        cmd1(0xAE);       // SSD1306_DISPLAYOFF&#13;" line971="        cmd1(0xA4);       // SSD1306_DISPLAYALLON_RESUME&#13;" line972="        cmd2(0xD5, 0xF5); // SSD1306_SETDISPLAYCLOCKDIV&#13;" line973="        cmd2(0xA8, 0x3F); // SSD1306_SETMULTIPLEX&#13;" line974="        cmd2(0xD3, 0x00); // SSD1306_SETDISPLAYOFFSET&#13;" line975="        cmd1(0 | 0x0);    // line #SSD1306_SETSTARTLINE&#13;" line976="        cmd2(0x8D, 0x14); // SSD1306_CHARGEPUMP&#13;" line977="        cmd2(0x20, 0x00); // SSD1306_MEMORYMODE&#13;" line978="        cmd3(0x21, 0, 127); // SSD1306_COLUMNADDR&#13;" line979="        cmd3(0x22, 0, 63);  // SSD1306_PAGEADDR&#13;" line980="        cmd1(0xa0 | 0x1); // SSD1306_SEGREMAP&#13;" line981="        cmd1(0xc8);       // SSD1306_COMSCANDEC&#13;" line982="        cmd2(0xDA, 0x12); // SSD1306_SETCOMPINS&#13;" line983="        cmd2(0x81, 0xCF); // SSD1306_SETCONTRAST&#13;" line984="        cmd2(0xd9, 0xF1); // SSD1306_SETPRECHARGE&#13;" line985="        cmd2(0xDB, 0x40); // SSD1306_SETVCOMDETECT&#13;" line986="        cmd1(0xA6);       // SSD1306_NORMALDISPLAY&#13;" line987="        cmd2(0xD6, 0);    // zoom off&#13;" line988="        cmd1(0xAF);       // SSD1306_DISPLAYON&#13;" line989="        clear();&#13;" line990="    }&#13;" line991="&#13;" line992="    init();&#13;" line993="}" numlines="994"></mutation><next><block type="typescript_statement" id="/sM)8j.:,I`Zeix*=_Od"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace smbus {&#13;" line1="    export function writeByte(address: number, register: number, value: number): void {&#13;" line2="        let temp = pins.createBuffer(2);&#13;" line3="        temp[0] = register;&#13;" line4="        temp[1] = value;&#13;" line5="        pins.i2cWriteBuffer(address, temp, false);&#13;" line6="    }&#13;" line7="    export function writeBuffer(address: number, register: number, value: Buffer): void {&#13;" line8="        let temp2 = pins.createBuffer(value.length + 1);&#13;" line9="        temp2[0] = register;&#13;" line10="        for (let index6 = 0; index6 &lt; value.length; index6++) {&#13;" line11="            temp2[index6 + 1] = value[index6];&#13;" line12="        }&#13;" line13="        pins.i2cWriteBuffer(address, temp2, false);&#13;" line14="    }&#13;" line15="    export function readBuffer(address: number, register: number, length: number): Buffer {&#13;" line16="        let temp3 = pins.createBuffer(1);&#13;" line17="        temp3[0] = register;&#13;" line18="        pins.i2cWriteBuffer(address, temp3, false);&#13;" line19="        return pins.i2cReadBuffer(address, length, false);&#13;" line20="    }&#13;" line21="    export function readNumber(address: number, register: number, format: NumberFormat = NumberFormat.UInt8LE): number {&#13;" line22="        let temp4 = pins.createBuffer(1);&#13;" line23="        temp4[0] = register;&#13;" line24="        pins.i2cWriteBuffer(address, temp4, false);&#13;" line25="        return pins.i2cReadNumber(address, format, false);&#13;" line26="    }&#13;" line27="    export function unpack(format: string, buffer: Buffer): number[] {&#13;" line28="        let littleEndian: boolean = true;&#13;" line29="        let offset: number = 0;&#13;" line30="        let result3: number[] = [];&#13;" line31="        let numberFormat: NumberFormat = 0;&#13;" line32="        for (let charIndex = 0; charIndex &lt; format.length; charIndex++) {&#13;" line33="            switch (format.charAt(charIndex)) {&#13;" line34="                case '&lt;':&#13;" line35="                    littleEndian = true;&#13;" line36="                    continue;&#13;" line37="                case '&gt;':&#13;" line38="                    littleEndian = false;&#13;" line39="                    continue;&#13;" line40="                case 'c':&#13;" line41="                case 'B':&#13;" line42="                    numberFormat = littleEndian ? NumberFormat.UInt8LE : NumberFormat.UInt8BE; break;&#13;" line43="                case 'b':&#13;" line44="                    numberFormat = littleEndian ? NumberFormat.Int8LE : NumberFormat.Int8BE; break;&#13;" line45="                case 'H':&#13;" line46="                    numberFormat = littleEndian ? NumberFormat.UInt16LE : NumberFormat.UInt16BE; break;&#13;" line47="                case 'h':&#13;" line48="                    numberFormat = littleEndian ? NumberFormat.Int16LE : NumberFormat.Int16BE; break;&#13;" line49="            }&#13;" line50="            result3.push(buffer.getNumber(numberFormat, offset));&#13;" line51="            offset += pins.sizeOf(numberFormat);&#13;" line52="        }&#13;" line53="        return result3;&#13;" line54="    }&#13;" line55="}" numlines="56"></mutation></block></next></block></next></block></statement></block></xml>